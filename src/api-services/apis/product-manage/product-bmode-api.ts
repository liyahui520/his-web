/* tslint:disable */
/* eslint-disable */
/**
 * B超和X光
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import {
    AddProductBModesInput,
    AdminResultObject,
    AdminResultSqlSugarPagedListProductBModesDto,
    DeleteProductBModesInput,
    ProductBModesInput,
    UpdateProductBModesInput,
    IdInput
} from '../../models/product-manage';
/**
 * ProductBModeApi - axios parameter creator
 * @export
 */
export const ProductBModeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加B超
         * @param {AddProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModeAddPost: async (body?: AddProductBModesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除B超
         * @param {DeleteProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModeDeletePost: async (body?: DeleteProductBModesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新B超
         * @param {UpdateProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModeEditPost: async (body?: UpdateProductBModesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取B超列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModeListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询B超
         * @param {ProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModePagePost: async (body?: ProductBModesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 批量删除B超
         * @param {IdInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBModeDeleteByIdsDelete: async (body?: IdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBMode/delete-by-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductBModeApi - functional programming interface
 * @export
 */
export const ProductBModeApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加B超
         * @param {AddProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeAddPost(body?: AddProductBModesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModeAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除B超
         * @param {DeleteProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeDeletePost(body?: DeleteProductBModesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModeDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新B超
         * @param {UpdateProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeEditPost(body?: UpdateProductBModesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModeEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取B超列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModeListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询B超
         * @param {ProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModePagePost(body?: ProductBModesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListProductBModesDto>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModePagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 批量删除B超
         * @param {IdInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBModeApiAxiosParamCreator(configuration).apiProductBModeDeleteByIdsDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductBModeApi - factory interface
 * @export
 */
export const ProductBModeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加B超
         * @param {AddProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeAddPost(body?: AddProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBModeApiFp(configuration).apiProductBModeAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除B超
         * @param {DeleteProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeDeletePost(body?: DeleteProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBModeApiFp(configuration).apiProductBModeDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新B超
         * @param {UpdateProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeEditPost(body?: UpdateProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBModeApiFp(configuration).apiProductBModeEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取B超列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ProductBModeApiFp(configuration).apiProductBModeListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询B超
         * @param {ProductBModesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModePagePost(body?: ProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListProductBModesDto>> {
            return ProductBModeApiFp(configuration).apiProductBModePagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 批量删除B超
         * @param {IdInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBModeDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBModeApiFp(configuration).apiProductBModeDeleteByIdsDelete(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductBModeApi - object-oriented interface
 * @export
 * @class ProductBModeApi
 * @extends {BaseAPI}
 */
export class ProductBModeApi extends BaseAPI {
    /**
     * 
     * @summary 增加B超
     * @param {AddProductBModesInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModeAddPost(body?: AddProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductBModeApiFp(this.configuration).apiProductBModeAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除B超
     * @param {DeleteProductBModesInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModeDeletePost(body?: DeleteProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductBModeApiFp(this.configuration).apiProductBModeDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新B超
     * @param {UpdateProductBModesInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModeEditPost(body?: UpdateProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductBModeApiFp(this.configuration).apiProductBModeEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取B超列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModeListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
        return ProductBModeApiFp(this.configuration).apiProductBModeListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询B超
     * @param {ProductBModesInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModePagePost(body?: ProductBModesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListProductBModesDto>> {
        return ProductBModeApiFp(this.configuration).apiProductBModePagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 批量删除B超
     * @param {IdInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBModeApi
     */
    public async apiProductBModeDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductBModeApiFp(this.configuration).apiProductBModeDeleteByIdsDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
}
