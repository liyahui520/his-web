/* tslint:disable */
/* eslint-disable */
/**
 * 打印和预览服务
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { 
    PrescriptionPrintInput,
    AdminResultReportPrintBaseReportPrintPrescriptionOptput,
    AdminResultReportPrintBaseMicroReportOutput,
    AdminResultReportPrintBaseGetPrintCEMRecordInfoOutput,
    AdminResultReportPrintBaseBscanReportOutput,
    AdminResultReportPrintBaseXrayReportOutput,
    BscanReportInput,
    XrayReportInput,
    AdminResultReportPrintBaseReportPrintPaperOutput,
    AdminResultReportPrintBaseReportPrintTestOutput,
    GetPrintCEMRecordInfoInput,
    MicroReportInput,
    ReportPrintPaperInput,
    ReportPrintTestInput,
    TestPrintInput,
    AdminResultReportPrintBaseReportPrintTestOptput
 } from '../../models/print-and-preview-manage';


/**
 * PrintAndPreviewApi - axios parameter creator
 * @export
 */
export const PrintAndPreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {

        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {TestPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetTestPreviewPrintPost: async (body?: TestPrintInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-test-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取B超报告预览及打印
         * @param {BscanReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetBscanPreviewPrintPost: async (body?: BscanReportInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-bscan-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取显微镜报告预览及打印
         * @param {MicroReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetMicroPreviewPrintPost: async (body?: MicroReportInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-micro-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取试纸打印/预览报告  A4/A5
         * @param {ReportPrintPaperInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetPaperReportPreviewPrintPost: async (body?: ReportPrintPaperInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-paper-report-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取处方打印/预览报告  A4/A5
         * @param {PrescriptionPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetPrescriptionPreviewPrintPost: async (body?: PrescriptionPrintInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-prescription-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {ReportPrintTestInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetTestReportPreviewPrintPost: async (body?: ReportPrintTestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-test-report-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取X光报告预览及打印
         * @param {XrayReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewGetXrayPreviewPrintPost: async (body?: XrayReportInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printAndPreview/get-xray-preview-print`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取病例打印/预览病例
         * @param {number} recordId 
         * @param {GetPrintCEMRecordInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost: async (recordId: number, body?: GetPrintCEMRecordInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            if (recordId === null || recordId === undefined) {
                throw new RequiredError('recordId','Required parameter recordId was null or undefined when calling apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost.');
            }
            const localVarPath = `/api/printAndPreview/{recordId}/get-record-preview-print`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrintAndPreviewApi - functional programming interface
 * @export
 */
export const PrintAndPreviewApiFp = function(configuration?: Configuration) {
    return {

        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {TestPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetTestPreviewPrintPost(body?: TestPrintInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOptput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetTestPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取B超报告预览及打印
         * @param {BscanReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetBscanPreviewPrintPost(body?: BscanReportInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseBscanReportOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetBscanPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取显微镜报告预览及打印
         * @param {MicroReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetMicroPreviewPrintPost(body?: MicroReportInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseMicroReportOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetMicroPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取试纸打印/预览报告  A4/A5
         * @param {ReportPrintPaperInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetPaperReportPreviewPrintPost(body?: ReportPrintPaperInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPaperOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetPaperReportPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取处方打印/预览报告  A4/A5
         * @param {PrescriptionPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body?: PrescriptionPrintInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPrescriptionOptput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {ReportPrintTestInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetTestReportPreviewPrintPost(body?: ReportPrintTestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetTestReportPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取X光报告预览及打印
         * @param {XrayReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetXrayPreviewPrintPost(body?: XrayReportInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseXrayReportOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewGetXrayPreviewPrintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取病例打印/预览病例
         * @param {number} recordId 
         * @param {GetPrintCEMRecordInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId: number, body?: GetPrintCEMRecordInfoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultReportPrintBaseGetPrintCEMRecordInfoOutput>>> {
            const localVarAxiosArgs = await PrintAndPreviewApiAxiosParamCreator(configuration).apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PrintAndPreviewApi - factory interface
 * @export
 */
export const PrintAndPreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {

        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {TestPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetTestPreviewPrintPost(body?: TestPrintInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOptput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetTestPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取B超报告预览及打印
         * @param {BscanReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetBscanPreviewPrintPost(body?: BscanReportInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseBscanReportOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetBscanPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取显微镜报告预览及打印
         * @param {MicroReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetMicroPreviewPrintPost(body?: MicroReportInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseMicroReportOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetMicroPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取试纸打印/预览报告  A4/A5
         * @param {ReportPrintPaperInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetPaperReportPreviewPrintPost(body?: ReportPrintPaperInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPaperOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetPaperReportPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取处方打印/预览报告  A4/A5
         * @param {PrescriptionPrintInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body?: PrescriptionPrintInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPrescriptionOptput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取化验打印/预览报告  A4/A5
         * @param {ReportPrintTestInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetTestReportPreviewPrintPost(body?: ReportPrintTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetTestReportPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取X光报告预览及打印
         * @param {XrayReportInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewGetXrayPreviewPrintPost(body?: XrayReportInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseXrayReportOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewGetXrayPreviewPrintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取病例打印/预览病例
         * @param {number} recordId 
         * @param {GetPrintCEMRecordInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId: number, body?: GetPrintCEMRecordInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultReportPrintBaseGetPrintCEMRecordInfoOutput>> {
            return PrintAndPreviewApiFp(configuration).apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrintAndPreviewApi - object-oriented interface
 * @export
 * @class PrintAndPreviewApi
 * @extends {BaseAPI}
 */
export class PrintAndPreviewApi extends BaseAPI {

    /**
     * 
     * @summary 获取化验打印/预览报告  A4/A5
     * @param {TestPrintInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetTestPreviewPrintPost(body?: TestPrintInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOptput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetTestPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取B超报告预览及打印
     * @param {BscanReportInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetBscanPreviewPrintPost(body?: BscanReportInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseBscanReportOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetBscanPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取显微镜报告预览及打印
     * @param {MicroReportInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetMicroPreviewPrintPost(body?: MicroReportInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseMicroReportOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetMicroPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取试纸打印/预览报告  A4/A5
     * @param {ReportPrintPaperInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetPaperReportPreviewPrintPost(body?: ReportPrintPaperInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPaperOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetPaperReportPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取处方打印/预览报告  A4/A5
     * @param {PrescriptionPrintInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body?: PrescriptionPrintInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintPrescriptionOptput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetPrescriptionPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取化验打印/预览报告  A4/A5
     * @param {ReportPrintTestInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetTestReportPreviewPrintPost(body?: ReportPrintTestInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseReportPrintTestOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetTestReportPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取X光报告预览及打印
     * @param {XrayReportInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewGetXrayPreviewPrintPost(body?: XrayReportInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseXrayReportOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewGetXrayPreviewPrintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取病例打印/预览病例
     * @param {number} recordId 
     * @param {GetPrintCEMRecordInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrintAndPreviewApi
     */
    public async apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId: number, body?: GetPrintCEMRecordInfoInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultReportPrintBaseGetPrintCEMRecordInfoOutput>> {
        return PrintAndPreviewApiFp(this.configuration).apiPrintAndPreviewRecordIdGetRecordPreviewPrintPost(recordId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
