/* tslint:disable */
/* eslint-disable */
/**
 * 会员管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: liyahui360@163.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AddPPetsInput } from '../../models/pcu-manage';
import { AdminResultListMiniHomePetOutput } from '../../models/pcu-manage';
import { AdminResultListPPets } from '../../models/pcu-manage';
import { AdminResultObject } from '../../models/pcu-manage';
import { AdminResultPPets } from '../../models/pcu-manage';
import { MiniHomePetInput } from '../../models/pcu-manage';
import { PPetsInput } from '../../models/pcu-manage';
import { UpdatePPetsInput } from '../../models/pcu-manage';
/**
 * PPetsApi - axios parameter creator
 * @export
 */
export const PPetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 增加宠物
         * @param {AddPPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsAddPost: async (body?: AddPPetsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pPets/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // @ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsIdDeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPPetsIdDeleteDelete.');
            }
            const localVarPath = `/api/pPets/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsIdDetailGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPPetsIdDetailGet.');
            }
            const localVarPath = `/api/pPets/{id}/detail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 更新宠物
         * @param {number} id
         * @param {UpdatePPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsIdEditPut: async (id: number, body?: UpdatePPetsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPPetsIdEditPut.');
            }
            const localVarPath = `/api/pPets/{id}/edit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // @ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取宠物列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pPets/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取首页宠物列表
         * @param {MiniHomePetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsMiniHomePetsGet: async (body?: MiniHomePetInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pPets/mini-home-pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // @ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 分页查询宠物
         * @param {PPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsPagePost: async (body?: PPetsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pPets/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // @ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据用户id获取宠物
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsPcustomerIdDetailByCustomeridGet: async (pcustomerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pcustomerId' is not null or undefined
            if (pcustomerId === null || pcustomerId === undefined) {
                throw new RequiredError('pcustomerId','Required parameter pcustomerId was null or undefined when calling apiPPetsPcustomerIdDetailByCustomeridGet.');
            }
            const localVarPath = `/api/pPets/{pcustomerId}/detail-by-customerid`
                .replace(`{${"pcustomerId"}}`, encodeURIComponent(String(pcustomerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },

        /**
         *
         * @summary 根据用户id获取宠物详细信息
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPPetsInfoDetailByCustomeridGet: async (pcustomerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pcustomerId' is not null or undefined
            if (pcustomerId === null || pcustomerId === undefined) {
                throw new RequiredError('pcustomerId','Required parameter pcustomerId was null or undefined when calling apiPPetsPcustomerIdDetailByCustomeridGet.');
            }
            const localVarPath = `/api/pPets/{pcustomerId}/pet-detail-info`
                .replace(`{${"pcustomerId"}}`, encodeURIComponent(String(pcustomerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PPetsApi - functional programming interface
 * @export
 */
export const PPetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary 增加宠物
         * @param {AddPPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsAddPost(body?: AddPPetsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 删除宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsIdDeleteDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdDetailGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultPPets>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsIdDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 更新宠物
         * @param {number} id
         * @param {UpdatePPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdEditPut(id: number, body?: UpdatePPetsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsIdEditPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取宠物列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsListPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取首页宠物列表
         * @param {MiniHomePetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsMiniHomePetsGet(body?: MiniHomePetInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMiniHomePetOutput>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsMiniHomePetsGet(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 分页查询宠物
         * @param {PPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsPagePost(body?: PPetsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 根据用户id获取宠物
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPPets>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 根据用户id获取宠物Info
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsInfoDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPPets>>> {
            const localVarAxiosArgs = await PPetsApiAxiosParamCreator(configuration).apiPPetsInfoDetailByCustomeridGet(pcustomerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PPetsApi - factory interface
 * @export
 */
export const PPetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 增加宠物
         * @param {AddPPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsAddPost(body?: AddPPetsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PPetsApiFp(configuration).apiPPetsAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PPetsApiFp(configuration).apiPPetsIdDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取宠物
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdDetailGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultPPets>> {
            return PPetsApiFp(configuration).apiPPetsIdDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 更新宠物
         * @param {number} id
         * @param {UpdatePPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsIdEditPut(id: number, body?: UpdatePPetsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PPetsApiFp(configuration).apiPPetsIdEditPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取宠物列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsListPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return PPetsApiFp(configuration).apiPPetsListPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取首页宠物列表
         * @param {MiniHomePetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsMiniHomePetsGet(body?: MiniHomePetInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMiniHomePetOutput>> {
            return PPetsApiFp(configuration).apiPPetsMiniHomePetsGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 分页查询宠物
         * @param {PPetsInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsPagePost(body?: PPetsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return PPetsApiFp(configuration).apiPPetsPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据用户id获取宠物
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPPets>> {
            return PPetsApiFp(configuration).apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据用户id获取宠物详情
         * @param {number} pcustomerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPPetsInfoDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPPets>> {
            return PPetsApiFp(configuration).apiPPetsInfoDetailByCustomeridGet(pcustomerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PPetsApi - object-oriented interface
 * @export
 * @class PPetsApi
 * @extends {BaseAPI}
 */
export class PPetsApi extends BaseAPI {
    /**
     *
     * @summary 增加宠物
     * @param {AddPPetsInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsAddPost(body?: AddPPetsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PPetsApiFp(this.configuration).apiPPetsAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 删除宠物
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsIdDeleteDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PPetsApiFp(this.configuration).apiPPetsIdDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取宠物
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsIdDetailGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultPPets>> {
        return PPetsApiFp(this.configuration).apiPPetsIdDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 更新宠物
     * @param {number} id
     * @param {UpdatePPetsInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsIdEditPut(id: number, body?: UpdatePPetsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PPetsApiFp(this.configuration).apiPPetsIdEditPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取宠物列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsListPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return PPetsApiFp(this.configuration).apiPPetsListPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取首页宠物列表
     * @param {MiniHomePetInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsMiniHomePetsGet(body?: MiniHomePetInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMiniHomePetOutput>> {
        return PPetsApiFp(this.configuration).apiPPetsMiniHomePetsGet(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 分页查询宠物
     * @param {PPetsInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsPagePost(body?: PPetsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return PPetsApiFp(this.configuration).apiPPetsPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据用户id获取宠物
     * @param {number} pcustomerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPPets>> {
        return PPetsApiFp(this.configuration).apiPPetsPcustomerIdDetailByCustomeridGet(pcustomerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据用户id获取宠物详情
     * @param {number} pcustomerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPetsApi
     */
    public async apiPPetsInfoDetailByCustomeridGet(pcustomerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPPets>> {
        return PPetsApiFp(this.configuration).apiPPetsInfoDetailByCustomeridGet(pcustomerId, options).then((request) => request(this.axios, this.basePath));
    }
}
