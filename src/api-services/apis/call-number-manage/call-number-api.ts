/* tslint:disable */
/* eslint-disable */
/**
 * 叫号服务
 * <br/><u><b><font color='FF0000'> 内部接口文档</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultListCallDeviceSettingDto } from '../../models/call-number-manage';
import { AdminResultListCallRoomSettingDto } from '../../models/call-number-manage';
import { CallDeviceSettingAddInput } from '../../models/call-number-manage';
import { CallDeviceSettingEditInput } from '../../models/call-number-manage';
import { CallNumberInput } from '../../models/call-number-manage';
import { CallRoomBindDeviceInput } from '../../models/call-number-manage';
import { CallRoomSettingAddInput } from '../../models/call-number-manage';
import { CallRoomSettingDeleteInput } from '../../models/call-number-manage';
import { CallRoomSettingEditInput } from '../../models/call-number-manage';
import { AdminResultListCallDeviceSettingOutput } from '../../models/call-number-manage';
/**
 * CallNumberApi - axios parameter creator
 * @export
 */
export const CallNumberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有可选设备以提供绑定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberGetCallDevicesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/get-call-devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增设备
         * @param {CallDeviceSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberAddCallDevicePost: async (body?: CallDeviceSettingAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/add-call-device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加诊室
         * @param {CallRoomSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberAddCallRoomPost: async (body?: CallRoomSettingAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/add-call-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 开始叫号  需要传递 诊室Id 和 排队编号
         * @param {CallNumberInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberCallNumberPost: async (body?: CallNumberInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/callNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 诊室绑定设备
         * @param {CallRoomBindDeviceInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberCallRoomBindDevicePost: async (body?: CallRoomBindDeviceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/call-room-bind-device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除诊室
         * @param {CallRoomSettingDeleteInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberDeleteCallRoomPost: async (body?: CallRoomSettingDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/delete-call-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑设备
         * @param {CallDeviceSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberEditCallDevicePost: async (body?: CallDeviceSettingEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/edit-call-device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑诊室
         * @param {CallRoomSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberEditCallRoomPost: async (body?: CallRoomSettingEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/edit-call-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取设备列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberGetCallDeviceListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/get-call-device-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前所有诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberGetCallRoomListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/get-call-room-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前所有可用诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCallNumberGetCallRoomUseListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/callNumber/get-call-room-use-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallNumberApi - functional programming interface
 * @export
 */
export const CallNumberApiFp = function(configuration?: Configuration) {
    return {

        /**
         * 
         * @summary 获取所有可选设备以提供绑定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallDevicesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCallDeviceSettingOutput>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberGetCallDevicesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新增设备
         * @param {CallDeviceSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberAddCallDevicePost(body?: CallDeviceSettingAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberAddCallDevicePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加诊室
         * @param {CallRoomSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberAddCallRoomPost(body?: CallRoomSettingAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberAddCallRoomPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 开始叫号  需要传递 诊室Id 和 排队编号
         * @param {CallNumberInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberCallNumberPost(body?: CallNumberInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberCallNumberPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 诊室绑定设备
         * @param {CallRoomBindDeviceInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberCallRoomBindDevicePost(body?: CallRoomBindDeviceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberCallRoomBindDevicePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除诊室
         * @param {CallRoomSettingDeleteInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberDeleteCallRoomPost(body?: CallRoomSettingDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberDeleteCallRoomPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑设备
         * @param {CallDeviceSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberEditCallDevicePost(body?: CallDeviceSettingEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberEditCallDevicePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑诊室
         * @param {CallRoomSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberEditCallRoomPost(body?: CallRoomSettingEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberEditCallRoomPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取设备列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallDeviceListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCallDeviceSettingDto>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberGetCallDeviceListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前所有诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallRoomListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCallRoomSettingDto>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberGetCallRoomListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前所有可用诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallRoomUseListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCallRoomSettingDto>>> {
            const localVarAxiosArgs = await CallNumberApiAxiosParamCreator(configuration).apiCallNumberGetCallRoomUseListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CallNumberApi - factory interface
 * @export
 */
export const CallNumberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {

        /**
         * 
         * @summary 获取所有可选设备以提供绑定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallDevicesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCallDeviceSettingOutput>> {
            return CallNumberApiFp(configuration).apiCallNumberGetCallDevicesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增设备
         * @param {CallDeviceSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberAddCallDevicePost(body?: CallDeviceSettingAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberAddCallDevicePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加诊室
         * @param {CallRoomSettingAddInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberAddCallRoomPost(body?: CallRoomSettingAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberAddCallRoomPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 开始叫号  需要传递 诊室Id 和 排队编号
         * @param {CallNumberInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberCallNumberPost(body?: CallNumberInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberCallNumberPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 诊室绑定设备
         * @param {CallRoomBindDeviceInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberCallRoomBindDevicePost(body?: CallRoomBindDeviceInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberCallRoomBindDevicePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除诊室
         * @param {CallRoomSettingDeleteInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberDeleteCallRoomPost(body?: CallRoomSettingDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberDeleteCallRoomPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑设备
         * @param {CallDeviceSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberEditCallDevicePost(body?: CallDeviceSettingEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberEditCallDevicePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑诊室
         * @param {CallRoomSettingEditInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberEditCallRoomPost(body?: CallRoomSettingEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CallNumberApiFp(configuration).apiCallNumberEditCallRoomPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取设备列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallDeviceListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCallDeviceSettingDto>> {
            return CallNumberApiFp(configuration).apiCallNumberGetCallDeviceListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前所有诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallRoomListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCallRoomSettingDto>> {
            return CallNumberApiFp(configuration).apiCallNumberGetCallRoomListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前所有可用诊室
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCallNumberGetCallRoomUseListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCallRoomSettingDto>> {
            return CallNumberApiFp(configuration).apiCallNumberGetCallRoomUseListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallNumberApi - object-oriented interface
 * @export
 * @class CallNumberApi
 * @extends {BaseAPI}
 */
export class CallNumberApi extends BaseAPI {
    
    /**
     * 
     * @summary 获取所有可选设备以提供绑定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberGetCallDevicesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListCallDeviceSettingOutput>> {
        return CallNumberApiFp(this.configuration).apiCallNumberGetCallDevicesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 新增设备
     * @param {CallDeviceSettingAddInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberAddCallDevicePost(body?: CallDeviceSettingAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberAddCallDevicePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 添加诊室
     * @param {CallRoomSettingAddInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberAddCallRoomPost(body?: CallRoomSettingAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberAddCallRoomPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 开始叫号  需要传递 诊室Id 和 排队编号
     * @param {CallNumberInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberCallNumberPost(body?: CallNumberInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberCallNumberPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 诊室绑定设备
     * @param {CallRoomBindDeviceInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberCallRoomBindDevicePost(body?: CallRoomBindDeviceInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberCallRoomBindDevicePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除诊室
     * @param {CallRoomSettingDeleteInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberDeleteCallRoomPost(body?: CallRoomSettingDeleteInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberDeleteCallRoomPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑设备
     * @param {CallDeviceSettingEditInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberEditCallDevicePost(body?: CallDeviceSettingEditInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberEditCallDevicePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑诊室
     * @param {CallRoomSettingEditInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberEditCallRoomPost(body?: CallRoomSettingEditInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CallNumberApiFp(this.configuration).apiCallNumberEditCallRoomPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取设备列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberGetCallDeviceListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListCallDeviceSettingDto>> {
        return CallNumberApiFp(this.configuration).apiCallNumberGetCallDeviceListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取当前所有诊室
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberGetCallRoomListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListCallRoomSettingDto>> {
        return CallNumberApiFp(this.configuration).apiCallNumberGetCallRoomListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取当前所有可用诊室
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallNumberApi
     */
    public async apiCallNumberGetCallRoomUseListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListCallRoomSettingDto>> {
        return CallNumberApiFp(this.configuration).apiCallNumberGetCallRoomUseListGet(options).then((request) => request(this.axios, this.basePath));
    }
}
