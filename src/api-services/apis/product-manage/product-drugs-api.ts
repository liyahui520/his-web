/* tslint:disable */
/* eslint-disable */
/**
 * 产品管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: liyahui360@163.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AddProductDrugsInput } from '../../models/product-manage';
import { AdminResultIActionResult } from '../../models/product-manage';
import { AdminResultListProductDoDto } from '../../models/product-manage';
import { AdminResultObject } from '../../models/product-manage';
import { AdminResultProductDoDto } from '../../models/product-manage';
import { AdminResultProductDrugs } from '../../models/product-manage';
import { AdminResultSqlSugarPagedListProductDrugsDto } from '../../models/product-manage';
import { DeleteProductDrugsInput } from '../../models/product-manage';
import { IdInput } from '../../models/product-manage';
import { ListByKindInput } from '../../models/product-manage';
import { ProductDrugsInput } from '../../models/product-manage';
import { TagInput } from '../../models/product-manage';
import { UpdateProductDrugsInput } from '../../models/product-manage';
/**
 * ProductDrugsApi - axios parameter creator
 * @export
 */
export const ProductDrugsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加药品
         * @param {AddProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsAddPost: async (body?: AddProductDrugsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {TagInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsAddTagPost: async (body?: TagInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/add-tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量删除药品
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsDeleteByIdsDelete: async (body?: IdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/delete-by-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除药品
         * @param {DeleteProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsDeleteDelete: async (body?: DeleteProductDrugsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsDeleteTagDelete: async (body?: IdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/delete-tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取药品
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {string} [createOrgName] 创建者部门名称
         * @param {string} [updateUserName] 修改者姓名
         * @param {string} [createUserName] 创建者姓名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsDetailGet: async (id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, createOrgName?: string, updateUserName?: string, createUserName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiProductDrugsDetailGet.');
            }
            const localVarPath = `/api/productDrugs/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (createTime !== undefined) {
                localVarQueryParameter['CreateTime'] = (createTime as any instanceof Date) ?
                    (createTime as any).toISOString() :
                    createTime;
            }

            if (updateTime !== undefined) {
                localVarQueryParameter['UpdateTime'] = (updateTime as any instanceof Date) ?
                    (updateTime as any).toISOString() :
                    updateTime;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['CreateUserId'] = createUserId;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['UpdateUserId'] = updateUserId;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }

            if (ver !== undefined) {
                localVarQueryParameter['Ver'] = ver;
            }

            if (createOrgName !== undefined) {
                localVarQueryParameter['CreateOrgName'] = createOrgName;
            }

            if (updateUserName !== undefined) {
                localVarQueryParameter['UpdateUserName'] = updateUserName;
            }

            if (createUserName !== undefined) {
                localVarQueryParameter['CreateUserName'] = createUserName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsEditByListPut: async (body?: UpdateProductDrugsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/edit-by-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsEditPut: async (body?: UpdateProductDrugsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据产品id获取产品信息
         * @param {number} id 产品id
         * @param {number} [kindId] 宠物种类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsIdGetSingProductKindIdGet: async (id: number, kindId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiProductDrugsIdGetSingProductKindIdGet.');
            }
            const localVarPath = `/api/productDrugs/{id}/get-sing-product/{kindId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (kindId !== undefined) {
                localVarQueryParameter['kindId'] = kindId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取搜索诊疗处方产品列表
         * @param {ListByKindInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsListByKindPost: async (body?: ListByKindInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/list-by-kind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取药品列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取诊疗处方产品列表
         * @param {string} name 
         * @param {number} kindId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsNameKindIdListByNameGet: async (name: string, kindId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling apiProductDrugsNameKindIdListByNameGet.');
            }
            // verify required parameter 'kindId' is not null or undefined
            if (kindId === null || kindId === undefined) {
                throw new RequiredError('kindId','Required parameter kindId was null or undefined when calling apiProductDrugsNameKindIdListByNameGet.');
            }
            const localVarPath = `/api/productDrugs/{name}/{kindId}/list-by-name`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"kindId"}}`, encodeURIComponent(String(kindId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询药品
         * @param {ProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDrugsPagePost: async (body?: ProductDrugsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productDrugs/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductDrugsApi - functional programming interface
 * @export
 */
export const ProductDrugsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加药品
         * @param {AddProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsAddPost(body?: AddProductDrugsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {TagInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsAddTagPost(body?: TagInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsAddTagPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量删除药品
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsDeleteByIdsDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除药品
         * @param {DeleteProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteDelete(body?: DeleteProductDrugsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsDeleteDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteTagDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsDeleteTagDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取药品
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {string} [createOrgName] 创建者部门名称
         * @param {string} [updateUserName] 修改者姓名
         * @param {string} [createUserName] 创建者姓名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, createOrgName?: string, updateUserName?: string, createUserName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultProductDrugs>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, createOrgName, updateUserName, createUserName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsEditByListPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsEditByListPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsEditPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsEditPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据产品id获取产品信息
         * @param {number} id 产品id
         * @param {number} [kindId] 宠物种类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsIdGetSingProductKindIdGet(id: number, kindId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultProductDoDto>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsIdGetSingProductKindIdGet(id, kindId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取搜索诊疗处方产品列表
         * @param {ListByKindInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsListByKindPost(body?: ListByKindInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductDoDto>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsListByKindPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取药品列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsListPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取诊疗处方产品列表
         * @param {string} name 
         * @param {number} kindId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsNameKindIdListByNameGet(name: string, kindId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsNameKindIdListByNameGet(name, kindId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询药品
         * @param {ProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsPagePost(body?: ProductDrugsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListProductDrugsDto>>> {
            const localVarAxiosArgs = await ProductDrugsApiAxiosParamCreator(configuration).apiProductDrugsPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductDrugsApi - factory interface
 * @export
 */
export const ProductDrugsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加药品
         * @param {AddProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsAddPost(body?: AddProductDrugsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {TagInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsAddTagPost(body?: TagInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsAddTagPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量删除药品
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsDeleteByIdsDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除药品
         * @param {DeleteProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteDelete(body?: DeleteProductDrugsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsDeleteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量添加标识
         * @param {IdInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDeleteTagDelete(body?: IdInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsDeleteTagDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取药品
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {string} [createOrgName] 创建者部门名称
         * @param {string} [updateUserName] 修改者姓名
         * @param {string} [createUserName] 创建者姓名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, createOrgName?: string, updateUserName?: string, createUserName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultProductDrugs>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, createOrgName, updateUserName, createUserName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsEditByListPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsEditByListPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新药品
         * @param {UpdateProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsEditPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsEditPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据产品id获取产品信息
         * @param {number} id 产品id
         * @param {number} [kindId] 宠物种类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsIdGetSingProductKindIdGet(id: number, kindId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultProductDoDto>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsIdGetSingProductKindIdGet(id, kindId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取搜索诊疗处方产品列表
         * @param {ListByKindInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsListByKindPost(body?: ListByKindInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductDoDto>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsListByKindPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取药品列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsListPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取诊疗处方产品列表
         * @param {string} name 
         * @param {number} kindId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsNameKindIdListByNameGet(name: string, kindId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsNameKindIdListByNameGet(name, kindId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询药品
         * @param {ProductDrugsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDrugsPagePost(body?: ProductDrugsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListProductDrugsDto>> {
            return ProductDrugsApiFp(configuration).apiProductDrugsPagePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductDrugsApi - object-oriented interface
 * @export
 * @class ProductDrugsApi
 * @extends {BaseAPI}
 */
export class ProductDrugsApi extends BaseAPI {
    /**
     * 
     * @summary 增加药品
     * @param {AddProductDrugsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsAddPost(body?: AddProductDrugsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 批量添加标识
     * @param {TagInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsAddTagPost(body?: TagInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsAddTagPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 批量删除药品
     * @param {IdInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsDeleteByIdsDelete(body?: IdInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsDeleteByIdsDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除药品
     * @param {DeleteProductDrugsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsDeleteDelete(body?: DeleteProductDrugsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsDeleteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 批量添加标识
     * @param {IdInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsDeleteTagDelete(body?: IdInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsDeleteTagDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取药品
     * @param {number} id 主键Id
     * @param {Date} [createTime] 创建时间
     * @param {Date} [updateTime] 更新时间
     * @param {number} [createUserId] 创建者Id
     * @param {number} [updateUserId] 修改者Id
     * @param {boolean} [isDelete] 软删除
     * @param {string} [ver] 版本标识
     * @param {string} [createOrgName] 创建者部门名称
     * @param {string} [updateUserName] 修改者姓名
     * @param {string} [createUserName] 创建者姓名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, createOrgName?: string, updateUserName?: string, createUserName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultProductDrugs>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, createOrgName, updateUserName, createUserName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新药品
     * @param {UpdateProductDrugsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsEditByListPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsEditByListPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新药品
     * @param {UpdateProductDrugsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsEditPut(body?: UpdateProductDrugsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsEditPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据产品id获取产品信息
     * @param {number} id 产品id
     * @param {number} [kindId] 宠物种类
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsIdGetSingProductKindIdGet(id: number, kindId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultProductDoDto>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsIdGetSingProductKindIdGet(id, kindId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取搜索诊疗处方产品列表
     * @param {ListByKindInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsListByKindPost(body?: ListByKindInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListProductDoDto>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsListByKindPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取药品列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsListPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsListPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取诊疗处方产品列表
     * @param {string} name 
     * @param {number} kindId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsNameKindIdListByNameGet(name: string, kindId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsNameKindIdListByNameGet(name, kindId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询药品
     * @param {ProductDrugsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDrugsApi
     */
    public async apiProductDrugsPagePost(body?: ProductDrugsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListProductDrugsDto>> {
        return ProductDrugsApiFp(this.configuration).apiProductDrugsPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}