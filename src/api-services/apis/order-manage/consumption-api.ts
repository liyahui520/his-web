/* tslint:disable */
/* eslint-disable */
/**
 * Ê∂àË¥πËÆ∞ÂΩï
 * <br/><u><b><font color='FF0000'> üëÆ‰∏çÂæóÂà©Áî®Êú¨È°πÁõÆ‰ªé‰∫ãÂç±ÂÆ≥ÂõΩÂÆ∂ÂÆâÂÖ®„ÄÅÊâ∞‰π±Á§æ‰ºöÁß©Â∫è„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõäÁ≠âÊ≥ïÂæãÊ≥ïËßÑÁ¶ÅÊ≠¢ÁöÑÊ¥ªÂä®ÔºÅ‰ªª‰ΩïÂü∫‰∫éÊú¨È°πÁõÆ‰∫åÊ¨°ÂºÄÂèëËÄå‰∫ßÁîüÁöÑ‰∏ÄÂàáÊ≥ïÂæãÁ∫†Á∫∑ÂíåË¥£‰ªªÔºåÊàë‰ª¨‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºÅ</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultIActionResult } from '../../models/order-manage';
import { AdminResultListPaymentDetailsOutput } from '../../models/order-manage';
import { AdminResultOrderCanReturnCustomerFundDto } from '../../models/order-manage';
import { AdminResultPrintBillOutput } from '../../models/order-manage';
import { AdminResultSqlSugarPagedListPaymentPageOutput } from '../../models/order-manage';
import { PaymentDetailsInput } from '../../models/order-manage';
import { PaymentPageInput,PaymentCustomerPageInput } from '../../models/order-manage';
import { PrintBillInput } from '../../models/order-manage';
import { OrderCanReturnCustomerFundInput } from '../../models/order-manage';
/**
 * ConsumptionApi - axios parameter creator
 * @export
 */
export const ConsumptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ÂØºÂá∫ËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionExportPaymentsPost: async (body?: PaymentPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/export-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },/**
        * 
        * @summary Ëé∑ÂèñËÆ¢ÂçïÂØπÂ∫îÁöÑÁî®Êà∑ÁöÑËµÑÈáë‰ø°ÊÅØ
        * @param {OrderCanReturnCustomerFundInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
       apiConsumptionGetOrderCustomerFundPost: async (body?: OrderCanReturnCustomerFundInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
           const localVarPath = `/api/consumption/get-order-customer-fund`;
           // use dummy base URL string because the URL constructor only accepts absolute URLs.
           const localVarUrlObj = new URL(localVarPath, 'https://example.com');
           let baseOptions;
           if (configuration) {
               baseOptions = configuration.baseOptions;
           }
           const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
           const localVarHeaderParameter = {} as any;
           const localVarQueryParameter = {} as any;

           // authentication Bearer required
           // http bearer authentication required
           if (configuration && configuration.accessToken) {
               const accessToken = typeof configuration.accessToken === 'function'
                   ? await configuration.accessToken()
                   : await configuration.accessToken;
               localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
           }

           localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

           const query = new URLSearchParams(localVarUrlObj.search);
           for (const key in localVarQueryParameter) {
               query.set(key, localVarQueryParameter[key]);
           }
           for (const key in options.params) {
               query.set(key, options.params[key]);
           }
           localVarUrlObj.search = (new URLSearchParams(query)).toString();
           let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
           localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
           const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
           localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

           return {
               url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
               options: localVarRequestOptions,
           };
       },
       
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÊòéÁªÜÂàóË°®
         * @param {PaymentDetailsInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionGetPaymentDetailsPost: async (body?: PaymentDetailsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/get-payment-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionGetPaymentPagePost: async (body?: PaymentPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/get-payment-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÁî®Êà∑ÂÆ†Áâ©ËÆ¢ÂçïÂàóË°®
         * @param {PaymentCustomerPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionGetPaymentCustomerPagePost: async (body?: PaymentCustomerPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/get-payment-customer-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÊâìÂç∞A4Ë¥¶Âçï
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionPrintBillA4Post: async (body?: PrintBillInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/print-bill-a4`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÊâìÂç∞Ë¥¶ÂçïÂ∞èÁ•®
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsumptionPrintBillNotePost: async (body?: PrintBillInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/consumption/print-bill-note`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsumptionApi - functional programming interface
 * @export
 */
export const ConsumptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ÂØºÂá∫ËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionExportPaymentsPost(body?: PaymentPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultIActionResult>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionExportPaymentsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÂØπÂ∫îÁöÑÁî®Êà∑ÁöÑËµÑÈáë‰ø°ÊÅØ
         * @param {OrderCanReturnCustomerFundInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetOrderCustomerFundPost(body?: OrderCanReturnCustomerFundInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultOrderCanReturnCustomerFundDto>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionGetOrderCustomerFundPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÊòéÁªÜÂàóË°®
         * @param {PaymentDetailsInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentDetailsPost(body?: PaymentDetailsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPaymentDetailsOutput>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionGetPaymentDetailsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentPagePost(body?: PaymentPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionGetPaymentPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÁî®Êà∑ÂÆ†Áâ©ËÆ¢ÂçïÂàóË°®
         * @param {PaymentCustomerPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentCustomerPagePost(body?: PaymentCustomerPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionGetPaymentCustomerPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÊâìÂç∞A4Ë¥¶Âçï
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionPrintBillA4Post(body?: PrintBillInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultPrintBillOutput>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionPrintBillA4Post(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÊâìÂç∞Ë¥¶ÂçïÂ∞èÁ•®
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionPrintBillNotePost(body?: PrintBillInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultPrintBillOutput>>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).apiConsumptionPrintBillNotePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConsumptionApi - factory interface
 * @export
 */
export const ConsumptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ÂØºÂá∫ËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionExportPaymentsPost(body?: PaymentPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultIActionResult>> {
            return ConsumptionApiFp(configuration).apiConsumptionExportPaymentsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÂØπÂ∫îÁöÑÁî®Êà∑ÁöÑËµÑÈáë‰ø°ÊÅØ
         * @param {OrderCanReturnCustomerFundInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetOrderCustomerFundPost(body?: OrderCanReturnCustomerFundInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultOrderCanReturnCustomerFundDto>> {
            return ConsumptionApiFp(configuration).apiConsumptionGetOrderCustomerFundPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÊòéÁªÜÂàóË°®
         * @param {PaymentDetailsInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentDetailsPost(body?: PaymentDetailsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPaymentDetailsOutput>> {
            return ConsumptionApiFp(configuration).apiConsumptionGetPaymentDetailsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñËÆ¢ÂçïÂàóË°®
         * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentPagePost(body?: PaymentPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>> {
            return ConsumptionApiFp(configuration).apiConsumptionGetPaymentPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÁî®Êà∑ÂÆ†Áâ©ËÆ¢ÂçïÂàóË°®
         * @param {PaymentCustomerPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionGetPaymentCustomerPagePost (body?: PaymentCustomerPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>> {
            return ConsumptionApiFp(configuration).apiConsumptionGetPaymentCustomerPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÊâìÂç∞A4Ë¥¶Âçï
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionPrintBillA4Post(body?: PrintBillInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultPrintBillOutput>> {
            return ConsumptionApiFp(configuration).apiConsumptionPrintBillA4Post(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÊâìÂç∞Ë¥¶ÂçïÂ∞èÁ•®
         * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsumptionPrintBillNotePost(body?: PrintBillInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultPrintBillOutput>> {
            return ConsumptionApiFp(configuration).apiConsumptionPrintBillNotePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsumptionApi - object-oriented interface
 * @export
 * @class ConsumptionApi
 * @extends {BaseAPI}
 */
export class ConsumptionApi extends BaseAPI {
    /**
     * 
     * @summary ÂØºÂá∫ËÆ¢ÂçïÂàóË°®
     * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionExportPaymentsPost(body?: PaymentPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultIActionResult>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionExportPaymentsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñËÆ¢ÂçïÂØπÂ∫îÁöÑÁî®Êà∑ÁöÑËµÑÈáë‰ø°ÊÅØ
     * @param {OrderCanReturnCustomerFundInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionGetOrderCustomerFundPost(body?: OrderCanReturnCustomerFundInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultOrderCanReturnCustomerFundDto>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionGetOrderCustomerFundPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñËÆ¢ÂçïÊòéÁªÜÂàóË°®
     * @param {PaymentDetailsInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionGetPaymentDetailsPost(body?: PaymentDetailsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPaymentDetailsOutput>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionGetPaymentDetailsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñËÆ¢ÂçïÂàóË°®
     * @param {PaymentPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionGetPaymentPagePost(body?: PaymentPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionGetPaymentPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÁî®Êà∑ÂÆ†Áâ©ËÆ¢ÂçïÂàóË°®
     * @param {PaymentCustomerPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionGetPaymentCustomerPagePost(body?: PaymentCustomerPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentPageOutput>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionGetPaymentCustomerPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÊâìÂç∞A4Ë¥¶Âçï
     * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionPrintBillA4Post(body?: PrintBillInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultPrintBillOutput>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionPrintBillA4Post(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÊâìÂç∞Ë¥¶ÂçïÂ∞èÁ•®
     * @param {PrintBillInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public async apiConsumptionPrintBillNotePost(body?: PrintBillInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultPrintBillOutput>> {
        return ConsumptionApiFp(this.configuration).apiConsumptionPrintBillNotePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
