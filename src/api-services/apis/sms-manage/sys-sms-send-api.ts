/* tslint:disable */
/* eslint-disable */
/**
 * 短信发送
 * <br/><u><b><font color='FF0000'> 内部接口文档</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import {
	AdminResultBoolean,
	AdminResultSqlSugarPagedListAlreadySendMessageOutput,
	AlreadySendMessageInput,
	SendPromotionMessageInput,
	SendSystemSmsInput,
	SmsVerifyCodeInput,
} from '../../models/sms-manage';

/**
 * SysSmsSendApi - axios parameter creator
 * @export
 */
export const SysSmsSendApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 获取已发短信记录
		 * @param {AlreadySendMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendGetSendedSmsPost: async (body?: AlreadySendMessageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/sysSmsSend/get-sended-sms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 发送用户自定义短信内容
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendSendCustomSmsPost: async (body?: SendPromotionMessageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/sysSmsSend/send-custom-sms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 按照指定用户手机号码发送推广短信
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendSendPromotionSmsPost: async (body?: SendPromotionMessageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/sysSmsSend/send-promotion-sms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 发送系统内验证码短信  注意此处可用于修改系统内登录密码  调用此处需要扣除系统内短信条数
		 * @param {string} mobiles 手机号  多个号码使用,分割
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendSendSmsCodeMobilesPost: async (mobiles: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'mobiles' is not null or undefined
			if (mobiles === null || mobiles === undefined) {
				throw new RequiredError('mobiles', 'Required parameter mobiles was null or undefined when calling apiSysSmsSendSendSmsCodeMobilesPost.');
			}
			const localVarPath = `/api/sysSmsSend/send-sms-code/{mobiles}`.replace(`{${'mobiles'}}`, encodeURIComponent(String(mobiles)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 发送系统短信
		 * @param {SendSystemSmsInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendSendSysSmsPost: async (body?: SendSystemSmsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/sysSmsSend/send-sys-sms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 校验短信验证码
		 * @param {SmsVerifyCodeInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiSysSmsSendVerifySmsCodePost: async (body?: SmsVerifyCodeInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/sysSmsSend/verify-sms-code`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * SysSmsSendApi - functional programming interface
 * @export
 */
export const SysSmsSendApiFp = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 获取已发短信记录
		 * @param {AlreadySendMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendGetSendedSmsPost(
			body?: AlreadySendMessageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListAlreadySendMessageOutput>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendGetSendedSmsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 发送用户自定义短信内容
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendCustomSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendSendCustomSmsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 按照指定用户手机号码发送推广短信
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendPromotionSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendSendPromotionSmsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 发送系统内验证码短信  注意此处可用于修改系统内登录密码  调用此处需要扣除系统内短信条数
		 * @param {string} mobiles 手机号  多个号码使用,分割
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendSmsCodeMobilesPost(mobiles: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendSendSmsCodeMobilesPost(mobiles, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 发送系统短信
		 * @param {SendSystemSmsInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendSysSmsPost(body?: SendSystemSmsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendSendSysSmsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 校验短信验证码
		 * @param {SmsVerifyCodeInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendVerifySmsCodePost(body?: SmsVerifyCodeInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
			const localVarAxiosArgs = await SysSmsSendApiAxiosParamCreator(configuration).apiSysSmsSendVerifySmsCodePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
	};
};

/**
 * SysSmsSendApi - factory interface
 * @export
 */
export const SysSmsSendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	return {
		/**
		 *
		 * @summary 获取已发短信记录
		 * @param {AlreadySendMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendGetSendedSmsPost(body?: AlreadySendMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListAlreadySendMessageOutput>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendGetSendedSmsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 发送用户自定义短信内容
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendCustomSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendSendCustomSmsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 按照指定用户手机号码发送推广短信
		 * @param {SendPromotionMessageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendPromotionSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendSendPromotionSmsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 发送系统内验证码短信  注意此处可用于修改系统内登录密码  调用此处需要扣除系统内短信条数
		 * @param {string} mobiles 手机号  多个号码使用,分割
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendSmsCodeMobilesPost(mobiles: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendSendSmsCodeMobilesPost(mobiles, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 发送系统短信
		 * @param {SendSystemSmsInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendSendSysSmsPost(body?: SendSystemSmsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendSendSysSmsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 校验短信验证码
		 * @param {SmsVerifyCodeInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiSysSmsSendVerifySmsCodePost(body?: SmsVerifyCodeInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
			return SysSmsSendApiFp(configuration)
				.apiSysSmsSendVerifySmsCodePost(body, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * SysSmsSendApi - object-oriented interface
 * @export
 * @class SysSmsSendApi
 * @extends {BaseAPI}
 */
export class SysSmsSendApi extends BaseAPI {
	/**
	 *
	 * @summary 获取已发短信记录
	 * @param {AlreadySendMessageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendGetSendedSmsPost(body?: AlreadySendMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListAlreadySendMessageOutput>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendGetSendedSmsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 发送用户自定义短信内容
	 * @param {SendPromotionMessageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendSendCustomSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendSendCustomSmsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 按照指定用户手机号码发送推广短信
	 * @param {SendPromotionMessageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendSendPromotionSmsPost(body?: SendPromotionMessageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendSendPromotionSmsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 发送系统内验证码短信  注意此处可用于修改系统内登录密码  调用此处需要扣除系统内短信条数
	 * @param {string} mobiles 手机号  多个号码使用,分割
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendSendSmsCodeMobilesPost(mobiles: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendSendSmsCodeMobilesPost(mobiles, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 发送系统短信
	 * @param {SendSystemSmsInput} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendSendSysSmsPost(body?: SendSystemSmsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendSendSysSmsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 校验短信验证码
	 * @param {SmsVerifyCodeInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SysSmsSendApi
	 */
	public async apiSysSmsSendVerifySmsCodePost(body?: SmsVerifyCodeInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
		return SysSmsSendApiFp(this.configuration)
			.apiSysSmsSendVerifySmsCodePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
