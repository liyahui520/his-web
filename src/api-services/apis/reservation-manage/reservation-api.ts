/* tslint:disable */
/* eslint-disable */
/**
 * È¢ÑÁ∫¶ÊúçÂä°
 * <br/><u><b><font color='FF0000'> üëÆ‰∏çÂæóÂà©Áî®Êú¨È°πÁõÆ‰ªé‰∫ãÂç±ÂÆ≥ÂõΩÂÆ∂ÂÆâÂÖ®„ÄÅÊâ∞‰π±Á§æ‰ºöÁß©Â∫è„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõäÁ≠âÊ≥ïÂæãÊ≥ïËßÑÁ¶ÅÊ≠¢ÁöÑÊ¥ªÂä®ÔºÅ‰ªª‰ΩïÂü∫‰∫éÊú¨È°πÁõÆ‰∫åÊ¨°ÂºÄÂèëËÄå‰∫ßÁîüÁöÑ‰∏ÄÂàáÊ≥ïÂæãÁ∫†Á∫∑ÂíåË¥£‰ªªÔºåÊàë‰ª¨‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºÅ</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultSqlSugarPagedListReservationPageOutInput } from '../../models/reservation-manage';
import { PetReservationInput } from '../../models/reservation-manage';
import { ReservationDto } from '../../models/reservation-manage';
import { ReservationInput } from '../../models/reservation-manage';
import { ReservationPageInput } from '../../models/reservation-manage';
/**
 * ReservationApi - axios parameter creator
 * @export
 */
export const ReservationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Êñ∞Â¢ûÈ¢ÑÁ∫¶
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationAddPost: async (body?: ReservationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÂèñÊ∂àÈ¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationCancelPut: async (body?: ReservationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Á°ÆËÆ§È¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationConfirmPut: async (body?: ReservationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Êü•ËØ¢ÊåáÂÆöÁî®Êà∑ÂÆ†Áâ©ÁöÑÈ¢ÑÁ∫¶
         * @param {PetReservationInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationGetPetReservationPost: async (body?: PetReservationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/get-pet-reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Âà†Èô§È¢ÑÁ∫¶
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationIdDeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiReservationIdDeleteDelete.');
            }
            const localVarPath = `/api/reservation/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ‰øÆÊîπÈ¢ÑÁ∫¶
         * @param {number} id 
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationIdEditPut: async (id: number, body?: ReservationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiReservationIdEditPut.');
            }
            const localVarPath = `/api/reservation/{id}/edit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢‰ºöÂëò
         * @param {ReservationPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationPagePost: async (body?: ReservationPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Â∑≤Âà∞Â∫ó
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReservationTostorePut: async (body?: ReservationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/tostore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationApi - functional programming interface
 * @export
 */
export const ReservationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Êñ∞Â¢ûÈ¢ÑÁ∫¶
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationAddPost(body?: ReservationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÂèñÊ∂àÈ¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationCancelPut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationCancelPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Á°ÆËÆ§È¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationConfirmPut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationConfirmPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Êü•ËØ¢ÊåáÂÆöÁî®Êà∑ÂÆ†Áâ©ÁöÑÈ¢ÑÁ∫¶
         * @param {PetReservationInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationGetPetReservationPost(body?: PetReservationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationGetPetReservationPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Âà†Èô§È¢ÑÁ∫¶
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationIdDeleteDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ‰øÆÊîπÈ¢ÑÁ∫¶
         * @param {number} id 
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationIdEditPut(id: number, body?: ReservationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationIdEditPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢‰ºöÂëò
         * @param {ReservationPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationPagePost(body?: ReservationPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Â∑≤Âà∞Â∫ó
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationTostorePut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReservationApiAxiosParamCreator(configuration).apiReservationTostorePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReservationApi - factory interface
 * @export
 */
export const ReservationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Êñ∞Â¢ûÈ¢ÑÁ∫¶
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationAddPost(body?: ReservationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÂèñÊ∂àÈ¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationCancelPut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationCancelPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Á°ÆËÆ§È¢ÑÁ∫¶
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationConfirmPut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationConfirmPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Êü•ËØ¢ÊåáÂÆöÁî®Êà∑ÂÆ†Áâ©ÁöÑÈ¢ÑÁ∫¶
         * @param {PetReservationInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationGetPetReservationPost(body?: PetReservationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>> {
            return ReservationApiFp(configuration).apiReservationGetPetReservationPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Âà†Èô§È¢ÑÁ∫¶
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationIdDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ‰øÆÊîπÈ¢ÑÁ∫¶
         * @param {number} id 
         * @param {ReservationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationIdEditPut(id: number, body?: ReservationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationIdEditPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢‰ºöÂëò
         * @param {ReservationPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationPagePost(body?: ReservationPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>> {
            return ReservationApiFp(configuration).apiReservationPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Â∑≤Âà∞Â∫ó
         * @param {ReservationInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReservationTostorePut(body?: ReservationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReservationApiFp(configuration).apiReservationTostorePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReservationApi - object-oriented interface
 * @export
 * @class ReservationApi
 * @extends {BaseAPI}
 */
export class ReservationApi extends BaseAPI {
    /**
     * 
     * @summary Êñ∞Â¢ûÈ¢ÑÁ∫¶
     * @param {ReservationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationAddPost(body?: ReservationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÂèñÊ∂àÈ¢ÑÁ∫¶
     * @param {ReservationInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationCancelPut(body?: ReservationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationCancelPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Á°ÆËÆ§È¢ÑÁ∫¶
     * @param {ReservationInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationConfirmPut(body?: ReservationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationConfirmPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Êü•ËØ¢ÊåáÂÆöÁî®Êà∑ÂÆ†Áâ©ÁöÑÈ¢ÑÁ∫¶
     * @param {PetReservationInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationGetPetReservationPost(body?: PetReservationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>> {
        return ReservationApiFp(this.configuration).apiReservationGetPetReservationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Âà†Èô§È¢ÑÁ∫¶
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationIdDeleteDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationIdDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ‰øÆÊîπÈ¢ÑÁ∫¶
     * @param {number} id 
     * @param {ReservationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationIdEditPut(id: number, body?: ReservationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationIdEditPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÂàÜÈ°µÊü•ËØ¢‰ºöÂëò
     * @param {ReservationPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationPagePost(body?: ReservationPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListReservationPageOutInput>> {
        return ReservationApiFp(this.configuration).apiReservationPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Â∑≤Âà∞Â∫ó
     * @param {ReservationInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public async apiReservationTostorePut(body?: ReservationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReservationApiFp(this.configuration).apiReservationTostorePut(body, options).then((request) => request(this.axios, this.basePath));
    }
}
