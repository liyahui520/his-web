/* tslint:disable */
/* eslint-disable */
/**
 * 产品管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: liyahui360@163.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AddProductCategorysInput, ProductTypeEnums } from '../../models/product-manage';
import { AdminResultListProductCategorysHierarchyDto } from '../../models/product-manage';
import { DeleteProductCategorysInput } from '../../models/product-manage';
import { UpdateProductCategorysInput } from '../../models/product-manage';
import {
    AdminResultListProductCategorysProductsDto
} from "/@/api-services/models/product-manage/admin-result-list-product-categorys-products-dto";
/**
 * ProductCategorysApi - axios parameter creator
 * @export
 */
export const ProductCategorysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 增加目录
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysAddPost: async (body?: AddProductCategorysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },

        /**
         *
         * @summary 获取目录所有数据
         * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysCategoryTypeListProductGet: async (categoryType: ProductTypeEnums, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryType' is not null or undefined
            if (categoryType === null || categoryType === undefined) {
                throw new RequiredError('categoryType', 'Required parameter categoryType was null or undefined when calling apiProductCategorysCategoryTypeListProductGet.');
            }
            const localVarPath = `/api/productCategorys/{categoryType}/list-product`
                .replace(`{${"categoryType"}}`, encodeURIComponent(String(categoryType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除目录
         * @param {DeleteProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysDeleteDelete: async (body?: DeleteProductCategorysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 更新目录
         * @param {UpdateProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysEditPut: async (body?: UpdateProductCategorysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysListPost: async (body?: AddProductCategorysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },

        /**
         *
         * @summary 获取目录所有数据无参
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysListNoParamPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/list-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
     * @summary 获取目录所有数据根据类型
     * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCategorysListsPost: async (categoryType: ProductTypeEnums, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productCategorys/lists/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(categoryType)));;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCategorysApi - functional programming interface
 * @export
 */
export const ProductCategorysApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 增加目录
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysAddPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysCategoryTypeListProductGet(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductCategorysProductsDto>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysCategoryTypeListProductGet(categoryType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 删除目录
         * @param {DeleteProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysDeleteDelete(body?: DeleteProductCategorysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysDeleteDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 更新目录
         * @param {UpdateProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysEditPut(body?: UpdateProductCategorysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysEditPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListNoParamPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysListNoParamPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
     * @summary 获取目录所有数据根据类型
     * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListsPost(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>>> {
            const localVarAxiosArgs = await ProductCategorysApiAxiosParamCreator(configuration).apiProductCategorysListsPost(categoryType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductCategorysApi - factory interface
 * @export
 */
export const ProductCategorysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 增加目录
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysAddPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysAddPost(body, options).then((request) => request(axios, basePath));
        },

        /**
         *
         * @summary 获取目录所有数据
         * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysCategoryTypeListProductGet(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysProductsDto>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysCategoryTypeListProductGet(categoryType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除目录
         * @param {DeleteProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysDeleteDelete(body?: DeleteProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysDeleteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 更新目录
         * @param {UpdateProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysEditPut(body?: UpdateProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysEditPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取目录所有数据
         * @param {AddProductCategorysInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListNoParamPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysListNoParamPost(options).then((request) => request(axios, basePath));
        },

        /**
         *
     * @summary 获取目录所有数据根据类型
     * @param {ProductTypeEnums} categoryType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCategorysListsPost(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
            return ProductCategorysApiFp(configuration).apiProductCategorysListsPost(categoryType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductCategorysApi - object-oriented interface
 * @export
 * @class ProductCategorysApi
 * @extends {BaseAPI}
 */
export class ProductCategorysApi extends BaseAPI {
    /**
     *
     * @summary 增加目录
     * @param {AddProductCategorysInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysAddPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 获取目录所有数据
     * @param {ProductTypeEnums} categoryType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysCategoryTypeListProductGet(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysProductsDto>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysCategoryTypeListProductGet(categoryType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 删除目录
     * @param {DeleteProductCategorysInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysDeleteDelete(body?: DeleteProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysDeleteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 更新目录
     * @param {UpdateProductCategorysInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysEditPut(body?: UpdateProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysEditPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取目录所有数据
     * @param {AddProductCategorysInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysListPost(body?: AddProductCategorysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取目录所有数据
     * @param {AddProductCategorysInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysListNoParamPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysListNoParamPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取目录所有数据根据类型
     * @param {ProductTypeEnums} categoryType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategorysApi
     */
    public async apiProductCategorysListsPost(categoryType: ProductTypeEnums, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductCategorysHierarchyDto>> {
        return ProductCategorysApiFp(this.configuration).apiProductCategorysListsPost(categoryType, options).then((request) => request(this.axios, this.basePath));
    }
}
