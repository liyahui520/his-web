/* tslint:disable */
/* eslint-disable */
/**
 * Ê¨°Âç°ÁÆ°ÁêÜ
 * <br/><u><b><font color='FF0000'> üëÆ‰∏çÂæóÂà©Áî®Êú¨È°πÁõÆ‰ªé‰∫ãÂç±ÂÆ≥ÂõΩÂÆ∂ÂÆâÂÖ®„ÄÅÊâ∞‰π±Á§æ‰ºöÁß©Â∫è„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõäÁ≠âÊ≥ïÂæãÊ≥ïËßÑÁ¶ÅÊ≠¢ÁöÑÊ¥ªÂä®ÔºÅ‰ªª‰ΩïÂü∫‰∫éÊú¨È°πÁõÆ‰∫åÊ¨°ÂºÄÂèëËÄå‰∫ßÁîüÁöÑ‰∏ÄÂàáÊ≥ïÂæãÁ∫†Á∫∑ÂíåË¥£‰ªªÔºåÊàë‰ª¨‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºÅ</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultListSecondaryCardsDto } from '../../models/card-manage';
import { AdminResultSecondaryCards } from '../../models/card-manage';
import { AdminResultSqlSugarPagedListSecondaryCardsContainCustomerOutput } from '../../models/card-manage';
import { AdminResultSqlSugarPagedListSecondaryCardsDto } from '../../models/card-manage';
import { SecondaryCardsContainCustomerInput } from '../../models/card-manage';
import { SecondaryCardsEditInput } from '../../models/card-manage';
import { SecondaryCardsInput } from '../../models/card-manage';
import { SecondaryCardsPageInput } from '../../models/card-manage';
/**
 * SecondaryCardsApi - axios parameter creator
 * @export
 */
export const SecondaryCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ÂàõÂª∫Ê¨°Âç°
         * @param {SecondaryCardsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsAddPost: async (body?: SecondaryCardsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÁºñËæëÊ¨°Âç°
         * @param {SecondaryCardsEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsEditPost: async (body?: SecondaryCardsEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ÂåÖÂê´ÁöÑ‰ºöÂëòÂàóË°®
         * @param {SecondaryCardsContainCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsGetContainCustomerPost: async (body?: SecondaryCardsContainCustomerInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/get-contain-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Âà†Èô§Ê¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsIdDeletePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSecondaryCardsIdDeletePost.');
            }
            const localVarPath = `/api/secondaryCards/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsIdDetailGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSecondaryCardsIdDetailGet.');
            }
            const localVarPath = `/api/secondaryCards/{id}/detail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâ‰∏çÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDisableSecondaryCardsListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/disable-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢Ê¨°Âç°ÂàóË°®
         * @param {SecondaryCardsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecondaryCardsPagePost: async (body?: SecondaryCardsPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/secondaryCards/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryCardsApi - functional programming interface
 * @export
 */
export const SecondaryCardsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ÂàõÂª∫Ê¨°Âç°
         * @param {SecondaryCardsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsAddPost(body?: SecondaryCardsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÁºñËæëÊ¨°Âç°
         * @param {SecondaryCardsEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsEditPost(body?: SecondaryCardsEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ÂåÖÂê´ÁöÑ‰ºöÂëòÂàóË°®
         * @param {SecondaryCardsContainCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsGetContainCustomerPost(body?: SecondaryCardsContainCustomerInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsContainCustomerOutput>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsGetContainCustomerPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Âà†Èô§Ê¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsIdDeletePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsIdDeletePost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsIdDetailGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSecondaryCards>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsIdDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSecondaryCardsDto>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâ‰∏çÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDisableSecondaryCardsListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSecondaryCardsDto>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiDisableSecondaryCardsListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢Ê¨°Âç°ÂàóË°®
         * @param {SecondaryCardsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsPagePost(body?: SecondaryCardsPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsDto>>> {
            const localVarAxiosArgs = await SecondaryCardsApiAxiosParamCreator(configuration).apiSecondaryCardsPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecondaryCardsApi - factory interface
 * @export
 */
export const SecondaryCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ÂàõÂª∫Ê¨°Âç°
         * @param {SecondaryCardsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsAddPost(body?: SecondaryCardsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÁºñËæëÊ¨°Âç°
         * @param {SecondaryCardsEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsEditPost(body?: SecondaryCardsEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ÂåÖÂê´ÁöÑ‰ºöÂëòÂàóË°®
         * @param {SecondaryCardsContainCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsGetContainCustomerPost(body?: SecondaryCardsContainCustomerInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsContainCustomerOutput>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsGetContainCustomerPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Âà†Èô§Ê¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsIdDeletePost(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsIdDeletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊ¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
         * @param {number} id ‰∏ªÈîÆId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsIdDetailGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSecondaryCards>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsIdDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSecondaryCardsDto>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊâÄÊúâ‰∏çÂèØÁî®Ê¨°Âç°
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDisableSecondaryCardsListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSecondaryCardsDto>> {
            return SecondaryCardsApiFp(configuration).apiDisableSecondaryCardsListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÂàÜÈ°µÊü•ËØ¢Ê¨°Âç°ÂàóË°®
         * @param {SecondaryCardsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecondaryCardsPagePost(body?: SecondaryCardsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsDto>> {
            return SecondaryCardsApiFp(configuration).apiSecondaryCardsPagePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryCardsApi - object-oriented interface
 * @export
 * @class SecondaryCardsApi
 * @extends {BaseAPI}
 */
export class SecondaryCardsApi extends BaseAPI {
    /**
     * 
     * @summary ÂàõÂª∫Ê¨°Âç°
     * @param {SecondaryCardsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsAddPost(body?: SecondaryCardsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÁºñËæëÊ¨°Âç°
     * @param {SecondaryCardsEditInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsEditPost(body?: SecondaryCardsEditInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊ¨°Âç°ÂåÖÂê´ÁöÑ‰ºöÂëòÂàóË°®
     * @param {SecondaryCardsContainCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsGetContainCustomerPost(body?: SecondaryCardsContainCustomerInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsContainCustomerOutput>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsGetContainCustomerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Âà†Èô§Ê¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
     * @param {number} id ‰∏ªÈîÆId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsIdDeletePost(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsIdDeletePost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊ¨°Âç°ËØ¶ÊÉÖ‰ø°ÊÅØ
     * @param {number} id ‰∏ªÈîÆId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsIdDetailGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSecondaryCards>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsIdDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊâÄÊúâÂèØÁî®Ê¨°Âç°
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListSecondaryCardsDto>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊâÄÊúâ‰∏çÂèØÁî®Ê¨°Âç°
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiDisableSecondaryCardsListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListSecondaryCardsDto>> {
        return SecondaryCardsApiFp(this.configuration).apiDisableSecondaryCardsListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÂàÜÈ°µÊü•ËØ¢Ê¨°Âç°ÂàóË°®
     * @param {SecondaryCardsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryCardsApi
     */
    public async apiSecondaryCardsPagePost(body?: SecondaryCardsPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListSecondaryCardsDto>> {
        return SecondaryCardsApiFp(this.configuration).apiSecondaryCardsPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
