/* tslint:disable */
/* eslint-disable */
/**
 * 诊疗内文本模板管理
 * <br/><u><b><font color='FF0000'> 内部接口文档</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultCemTemplate } from '../../models/template-json-manage';
import { AdminResultSqlSugarPagedListCemTemplate } from '../../models/template-json-manage';
import { CemTemplateDto } from '../../models/template-json-manage';
import { CemTemplatePageDto } from '../../models/template-json-manage';
import { CemTemplateTypeEnum } from '../../models/template-json-manage';
/**
 * CemTemplateApi - axios parameter creator
 * @export
 */
export const CemTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除模板
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCemTemplateIdDeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCemTemplateIdDeleteDelete.');
            }
            const localVarPath = `/api/cemTemplate/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询模板
         * @param {CemTemplatePageDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCemTemplatePagePost: async (body?: CemTemplatePageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cemTemplate/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增模板
         * @param {CemTemplateTypeEnum} type 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCemTemplateTypeAddPost: async (type: CemTemplateTypeEnum, body?: CemTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling apiCemTemplateTypeAddPost.');
            }
            const localVarPath = `/api/cemTemplate/{type}/add`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑模板
         * @param {CemTemplateTypeEnum} type 
         * @param {number} id 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCemTemplateTypeIdEditPut: async (type: CemTemplateTypeEnum, id: number, body?: CemTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling apiCemTemplateTypeIdEditPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCemTemplateTypeIdEditPut.');
            }
            const localVarPath = `/api/cemTemplate/{type}/{id}/edit`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CemTemplateApi - functional programming interface
 * @export
 */
export const CemTemplateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除模板
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CemTemplateApiAxiosParamCreator(configuration).apiCemTemplateIdDeleteDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询模板
         * @param {CemTemplatePageDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplatePagePost(body?: CemTemplatePageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListCemTemplate>>> {
            const localVarAxiosArgs = await CemTemplateApiAxiosParamCreator(configuration).apiCemTemplatePagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新增模板
         * @param {CemTemplateTypeEnum} type 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateTypeAddPost(type: CemTemplateTypeEnum, body?: CemTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCemTemplate>>> {
            const localVarAxiosArgs = await CemTemplateApiAxiosParamCreator(configuration).apiCemTemplateTypeAddPost(type, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑模板
         * @param {CemTemplateTypeEnum} type 
         * @param {number} id 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateTypeIdEditPut(type: CemTemplateTypeEnum, id: number, body?: CemTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCemTemplate>>> {
            const localVarAxiosArgs = await CemTemplateApiAxiosParamCreator(configuration).apiCemTemplateTypeIdEditPut(type, id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CemTemplateApi - factory interface
 * @export
 */
export const CemTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 删除模板
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CemTemplateApiFp(configuration).apiCemTemplateIdDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询模板
         * @param {CemTemplatePageDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplatePagePost(body?: CemTemplatePageDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListCemTemplate>> {
            return CemTemplateApiFp(configuration).apiCemTemplatePagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增模板
         * @param {CemTemplateTypeEnum} type 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateTypeAddPost(type: CemTemplateTypeEnum, body?: CemTemplateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCemTemplate>> {
            return CemTemplateApiFp(configuration).apiCemTemplateTypeAddPost(type, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑模板
         * @param {CemTemplateTypeEnum} type 
         * @param {number} id 
         * @param {CemTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCemTemplateTypeIdEditPut(type: CemTemplateTypeEnum, id: number, body?: CemTemplateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCemTemplate>> {
            return CemTemplateApiFp(configuration).apiCemTemplateTypeIdEditPut(type, id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CemTemplateApi - object-oriented interface
 * @export
 * @class CemTemplateApi
 * @extends {BaseAPI}
 */
export class CemTemplateApi extends BaseAPI {
    /**
     * 
     * @summary 删除模板
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CemTemplateApi
     */
    public async apiCemTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CemTemplateApiFp(this.configuration).apiCemTemplateIdDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询模板
     * @param {CemTemplatePageDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CemTemplateApi
     */
    public async apiCemTemplatePagePost(body?: CemTemplatePageDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListCemTemplate>> {
        return CemTemplateApiFp(this.configuration).apiCemTemplatePagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 新增模板
     * @param {CemTemplateTypeEnum} type 
     * @param {CemTemplateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CemTemplateApi
     */
    public async apiCemTemplateTypeAddPost(type: CemTemplateTypeEnum, body?: CemTemplateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultCemTemplate>> {
        return CemTemplateApiFp(this.configuration).apiCemTemplateTypeAddPost(type, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑模板
     * @param {CemTemplateTypeEnum} type 
     * @param {number} id 
     * @param {CemTemplateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CemTemplateApi
     */
    public async apiCemTemplateTypeIdEditPut(type: CemTemplateTypeEnum, id: number, body?: CemTemplateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultCemTemplate>> {
        return CemTemplateApiFp(this.configuration).apiCemTemplateTypeIdEditPut(type, id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
