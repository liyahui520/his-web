/* tslint:disable */
/* eslint-disable */
/**
 * 产品管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: liyahui360@163.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AddProductBrandsInput } from '../../models/product-manage';
import { AdminResultListProductBrandsOutput } from '../../models/product-manage';
import { AdminResultObject } from '../../models/product-manage';
import { AdminResultProductBrands } from '../../models/product-manage';
import { DeleteProductBrandsInput } from '../../models/product-manage';
import { UpdateProductBrandsInput } from '../../models/product-manage';
/**
 * ProductBrandsApi - axios parameter creator
 * @export
 */
export const ProductBrandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsAddPost: async (body?: AddProductBrandsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除品牌
         * @param {DeleteProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsDeleteDelete: async (body?: DeleteProductBrandsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取品牌
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsDetailGet: async (id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiProductBrandsDetailGet.');
            }
            const localVarPath = `/api/productBrands/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (createTime !== undefined) {
                localVarQueryParameter['CreateTime'] = (createTime as any instanceof Date) ?
                    (createTime as any).toISOString() :
                    createTime;
            }

            if (updateTime !== undefined) {
                localVarQueryParameter['UpdateTime'] = (updateTime as any instanceof Date) ?
                    (updateTime as any).toISOString() :
                    updateTime;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['CreateUserId'] = createUserId;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['UpdateUserId'] = updateUserId;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }

            if (ver !== undefined) {
                localVarQueryParameter['Ver'] = ver;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新品牌
         * @param {UpdateProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsEditPut: async (body?: UpdateProductBrandsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsPagePost: async (body?: AddProductBrandsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';


            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductBrandsSelectListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/productBrands/selectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductBrandsApi - functional programming interface
 * @export
 */
export const ProductBrandsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsAddPost(body?: AddProductBrandsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除品牌
         * @param {DeleteProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsDeleteDelete(body?: DeleteProductBrandsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsDeleteDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取品牌
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultProductBrands>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新品牌
         * @param {UpdateProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsEditPut(body?: UpdateProductBrandsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsEditPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsListPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsPagePost(body?: AddProductBrandsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsSelectListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListProductBrandsOutput>>> {
            const localVarAxiosArgs = await ProductBrandsApiAxiosParamCreator(configuration).apiProductBrandsSelectListPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductBrandsApi - factory interface
 * @export
 */
export const ProductBrandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsAddPost(body?: AddProductBrandsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除品牌
         * @param {DeleteProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsDeleteDelete(body?: DeleteProductBrandsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsDeleteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取品牌
         * @param {number} id 主键Id
         * @param {Date} [createTime] 创建时间
         * @param {Date} [updateTime] 更新时间
         * @param {number} [createUserId] 创建者Id
         * @param {number} [updateUserId] 修改者Id
         * @param {boolean} [isDelete] 软删除
         * @param {string} [ver] 版本标识
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultProductBrands>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新品牌
         * @param {UpdateProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsEditPut(body?: UpdateProductBrandsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsEditPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsListPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询品牌
         * @param {AddProductBrandsInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsPagePost(body?: AddProductBrandsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取品牌列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductBrandsSelectListPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListProductBrandsOutput>> {
            return ProductBrandsApiFp(configuration).apiProductBrandsSelectListPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductBrandsApi - object-oriented interface
 * @export
 * @class ProductBrandsApi
 * @extends {BaseAPI}
 */
export class ProductBrandsApi extends BaseAPI {
    /**
     * 
     * @summary 增加品牌
     * @param {AddProductBrandsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsAddPost(body?: AddProductBrandsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除品牌
     * @param {DeleteProductBrandsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsDeleteDelete(body?: DeleteProductBrandsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsDeleteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取品牌
     * @param {number} id 主键Id
     * @param {Date} [createTime] 创建时间
     * @param {Date} [updateTime] 更新时间
     * @param {number} [createUserId] 创建者Id
     * @param {number} [updateUserId] 修改者Id
     * @param {boolean} [isDelete] 软删除
     * @param {string} [ver] 版本标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsDetailGet(id: number, createTime?: Date, updateTime?: Date, createUserId?: number, updateUserId?: number, isDelete?: boolean, ver?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultProductBrands>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsDetailGet(id, createTime, updateTime, createUserId, updateUserId, isDelete, ver, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新品牌
     * @param {UpdateProductBrandsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsEditPut(body?: UpdateProductBrandsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsEditPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取品牌列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsListPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsListPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询品牌
     * @param {AddProductBrandsInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsPagePost(body?: AddProductBrandsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取品牌列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBrandsApi
     */
    public async apiProductBrandsSelectListPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListProductBrandsOutput>> {
        return ProductBrandsApiFp(this.configuration).apiProductBrandsSelectListPost(options).then((request) => request(this.axios, this.basePath));
    }
}
