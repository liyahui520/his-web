/* tslint:disable */
/* eslint-disable */
/**
 * ‰ºöÂëòÊäºÈáë
 * <br/><u><b><font color='FF0000'> üëÆ‰∏çÂæóÂà©Áî®Êú¨È°πÁõÆ‰ªé‰∫ãÂç±ÂÆ≥ÂõΩÂÆ∂ÂÆâÂÖ®„ÄÅÊâ∞‰π±Á§æ‰ºöÁß©Â∫è„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõäÁ≠âÊ≥ïÂæãÊ≥ïËßÑÁ¶ÅÊ≠¢ÁöÑÊ¥ªÂä®ÔºÅ‰ªª‰ΩïÂü∫‰∫éÊú¨È°πÁõÆ‰∫åÊ¨°ÂºÄÂèëËÄå‰∫ßÁîüÁöÑ‰∏ÄÂàáÊ≥ïÂæãÁ∫†Á∫∑ÂíåË¥£‰ªªÔºåÊàë‰ª¨‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºÅ</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultListMemberDepositDto } from '../../models';
import { AdminResultListMemberDepositMethodDto } from '../../models';
import { AdminResultListMemberDepositTypeDto } from '../../models';
import { AdminResultMemberDepositAmountDto } from '../../models';
import { AdminResultSqlSugarPagedListMemberDepositDetailDto } from '../../models';
import { MemberDepositPageInput } from '../../models';
import { RechargeDepositInput } from '../../models';
import { ReturnDepositInput } from '../../models';
/**
 * MemberDepositApi - axios parameter creator
 * @export
 */
export const MemberDepositApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂàóË°®
         * @param {MemberDepositPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberDepositGetMemberDepositPagePost: async (body?: MemberDepositPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memberDeposit/get-member-deposit-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÈáëÈ¢ù
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetMemberDepositInfoGet: async (customerId: String, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling apiGetMemberDepositInfoGet.');
            }
            const localVarPath = `/api/memberDeposit/{customerId}/get-member-deposit-info`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÂàóË°®
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetMemberDepositListGet: async (customerId: String, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling apiGetMemberDepositListGet.');
            }
            const localVarPath = `/api/memberDeposit/{customerId}/get-member-deposit-list`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂÖÖÂÄºÁ±ªÂûã
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberDepositGetDepositRechargeMethodsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memberDeposit/get-deposit-recharge-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÁ±ªÂûã
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberDepositGetDepositTypesGet: async (customerId: String, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling apiMemberDepositGetDepositTypesGet.');
            }
            const localVarPath = `/api/memberDeposit/{customerId}/get-deposit-types`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÂÖÖÂÄºÊäºÈáë
         * @param {RechargeDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberDepositRechargeDepositPost: async (body?: RechargeDepositInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memberDeposit/recharge-deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÈÄÄÊäºÈáë
         * @param {ReturnDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberDepositReturnDepositPost: async (body?: ReturnDepositInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memberDeposit/return-deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberDepositApi - functional programming interface
 * @export
 */
export const MemberDepositApiFp = function(configuration?: Configuration) {
    return {

        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂàóË°®
         * @param {MemberDepositPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetMemberDepositPagePost(body?: MemberDepositPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListMemberDepositDetailDto>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiMemberDepositGetMemberDepositPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÈáëÈ¢ù
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMemberDepositInfoGet(customerId: String, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultMemberDepositAmountDto>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiGetMemberDepositInfoGet(customerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÂàóË°®
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMemberDepositListGet(customerId: String, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMemberDepositDto>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiGetMemberDepositListGet(customerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂÖÖÂÄºÁ±ªÂûã
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetDepositRechargeMethodsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMemberDepositMethodDto>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiMemberDepositGetDepositRechargeMethodsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÁ±ªÂûã
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetDepositTypesGet(customerId: String, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMemberDepositTypeDto>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiMemberDepositGetDepositTypesGet(customerId,options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÂÖÖÂÄºÊäºÈáë
         * @param {RechargeDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositRechargeDepositPost(body?: RechargeDepositInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiMemberDepositRechargeDepositPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÈÄÄÊäºÈáë
         * @param {ReturnDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositReturnDepositPost(body?: ReturnDepositInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MemberDepositApiAxiosParamCreator(configuration).apiMemberDepositReturnDepositPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MemberDepositApi - factory interface
 * @export
 */
export const MemberDepositApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {

        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂàóË°®
         * @param {MemberDepositPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetMemberDepositPagePost(body?: MemberDepositPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListMemberDepositDetailDto>> {
            return MemberDepositApiFp(configuration).apiMemberDepositGetMemberDepositPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÈáëÈ¢ù
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMemberDepositInfoGet(customerId: String, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultMemberDepositAmountDto>> {
            return MemberDepositApiFp(configuration).apiGetMemberDepositInfoGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÂàóË°®
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMemberDepositListGet(customerId: String, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMemberDepositDto>> {
            return MemberDepositApiFp(configuration).apiGetMemberDepositListGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÂÖÖÂÄºÁ±ªÂûã
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetDepositRechargeMethodsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMemberDepositMethodDto>> {
            return MemberDepositApiFp(configuration).apiMemberDepositGetDepositRechargeMethodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÊäºÈáëÁ±ªÂûã
         * @param {String} customerId Áî®Êà∑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositGetDepositTypesGet(customerId: String, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMemberDepositTypeDto>> {
            return MemberDepositApiFp(configuration).apiMemberDepositGetDepositTypesGet(customerId,options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÂÖÖÂÄºÊäºÈáë
         * @param {RechargeDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositRechargeDepositPost(body?: RechargeDepositInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MemberDepositApiFp(configuration).apiMemberDepositRechargeDepositPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÈÄÄÊäºÈáë
         * @param {ReturnDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberDepositReturnDepositPost(body?: ReturnDepositInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MemberDepositApiFp(configuration).apiMemberDepositReturnDepositPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberDepositApi - object-oriented interface
 * @export
 * @class MemberDepositApi
 * @extends {BaseAPI}
 */
export class MemberDepositApi extends BaseAPI {
    /**
     * 
     * @summary Ëé∑ÂèñÊäºÈáëÂàóË°®
     * @param {MemberDepositPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiMemberDepositGetMemberDepositPagePost(body?: MemberDepositPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListMemberDepositDetailDto>> {
        return MemberDepositApiFp(this.configuration).apiMemberDepositGetMemberDepositPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÈáëÈ¢ù
     * @param {String} customerId Áî®Êà∑Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiGetMemberDepositInfoGet(customerId: String, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultMemberDepositAmountDto>> {
        return MemberDepositApiFp(this.configuration).apiGetMemberDepositInfoGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ê†πÊçÆÁî®Êà∑IdËé∑ÂèñÊäºÈáëÂàóË°®
     * @param {String} customerId Áî®Êà∑Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiGetMemberDepositListGet(customerId: String, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMemberDepositDto>> {
        return MemberDepositApiFp(this.configuration).apiGetMemberDepositListGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊäºÈáëÂÖÖÂÄºÁ±ªÂûã
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiMemberDepositGetDepositRechargeMethodsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMemberDepositMethodDto>> {
        return MemberDepositApiFp(this.configuration).apiMemberDepositGetDepositRechargeMethodsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÊäºÈáëÁ±ªÂûã
     * @param {String} customerId Áî®Êà∑Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiMemberDepositGetDepositTypesGet(customerId: String, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMemberDepositTypeDto>> {
        return MemberDepositApiFp(this.configuration).apiMemberDepositGetDepositTypesGet(customerId,options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÂÖÖÂÄºÊäºÈáë
     * @param {RechargeDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiMemberDepositRechargeDepositPost(body?: RechargeDepositInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MemberDepositApiFp(this.configuration).apiMemberDepositRechargeDepositPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÈÄÄÊäºÈáë
     * @param {ReturnDepositInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberDepositApi
     */
    public async apiMemberDepositReturnDepositPost(body?: ReturnDepositInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MemberDepositApiFp(this.configuration).apiMemberDepositReturnDepositPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
