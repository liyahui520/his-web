/* tslint:disable */
/* eslint-disable */
/**
 * 模板Json管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { SysPrintTemplatesInput } from '../../models/template-json-manage/sys-print-templates-input';
import { SysPrintTemplatesDeleteInput } from '../../models/template-json-manage/sys-print-templates-delete-input';
import { SysPrintTemplatesEditInput } from '../../models/template-json-manage/sys-print-templates-edit-input';
import { SysPrintTemplatesPageInput } from '../../models/template-json-manage/sys-print-templates-page-input';
import { AdminResultSqlSugarPagedListSysPrintTemplatesOutput } from '../../models/template-json-manage/admin-result-sql-sugar-paged-list-sys-print-templates-output';
import { PrintTypeEnum } from '../../models/template-json-manage/print-type-enum';
import { AdminResultListSysPrintTemplatesOutput } from '../../models/template-json-manage/admin-result-list-sys-print-templates-output';
/**
 * PrintTemplateApi - axios parameter creator
 * @export
 */
export const PrintTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 增加打印模板
		 * @param {SysPrintTemplatesInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateAddPost: async (body?: SysPrintTemplatesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/printTemplate/add`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 更新打印模板
		 * @param {SysPrintTemplatesEditInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateEditPost: async (body?: SysPrintTemplatesEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/printTemplate/edit`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除打印模板
		 * @param {number} id 模板Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateIdDeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPrintTemplateIdDeleteDelete.');
			}
			const localVarPath = `/api/printTemplate/{id}/delete`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 启用该模板
		 * @param {number} id
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateIdTypeEnablePut: async (id: number, type: PrintTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPrintTemplateIdTypeEnablePut.');
			}
			// verify required parameter 'type' is not null or undefined
			if (type === null || type === undefined) {
				throw new RequiredError('type', 'Required parameter type was null or undefined when calling apiPrintTemplateIdTypeEnablePut.');
			}
			const localVarPath = `/api/printTemplate/{id}/{type}/enable`.replace(`{${'id'}}`, encodeURIComponent(String(id))).replace(`{${'type'}}`, encodeURIComponent(String(type)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 分页查询打印模板
		 * @param {SysPrintTemplatesPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplatePagePost: async (body?: SysPrintTemplatesPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/printTemplate/page`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 根据类型查询模板信息
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateTypeGetallGet: async (type: PrintTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'type' is not null or undefined
			if (type === null || type === undefined) {
				throw new RequiredError('type', 'Required parameter type was null or undefined when calling apiPrintTemplateTypeGetallGet.');
			}
			const localVarPath = `/api/printTemplate/{type}/getall`.replace(`{${'type'}}`, encodeURIComponent(String(type)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 还原模板
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiPrintTemplateTypeRestartPut: async (type: PrintTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'type' is not null or undefined
			if (type === null || type === undefined) {
				throw new RequiredError('type', 'Required parameter type was null or undefined when calling apiPrintTemplateTypeRestartPut.');
			}
			const localVarPath = `/api/printTemplate/{type}/restart`.replace(`{${'type'}}`, encodeURIComponent(String(type)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * PrintTemplateApi - functional programming interface
 * @export
 */
export const PrintTemplateApiFp = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 增加打印模板
		 * @param {SysPrintTemplatesInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateAddPost(body?: SysPrintTemplatesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateAddPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 更新打印模板
		 * @param {SysPrintTemplatesEditInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateEditPost(body?: SysPrintTemplatesEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateEditPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除打印模板
		 * @param {number} id 模板Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateIdDeleteDelete(id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 启用该模板
		 * @param {number} id
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateIdTypeEnablePut(id: number, type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateIdTypeEnablePut(id, type, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 分页查询打印模板
		 * @param {SysPrintTemplatesPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplatePagePost(
			body?: SysPrintTemplatesPageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPrintTemplatesOutput>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplatePagePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 根据类型查询模板信息
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateTypeGetallGet(
			type: PrintTypeEnum,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSysPrintTemplatesOutput>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateTypeGetallGet(type, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 还原模板
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateTypeRestartPut(type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await PrintTemplateApiAxiosParamCreator(configuration).apiPrintTemplateTypeRestartPut(type, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
	};
};

/**
 * PrintTemplateApi - factory interface
 * @export
 */
export const PrintTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	return {
		/**
		 *
		 * @summary 增加打印模板
		 * @param {SysPrintTemplatesInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateAddPost(body?: SysPrintTemplatesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateAddPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 更新打印模板
		 * @param {SysPrintTemplatesEditInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateEditPost(body?: SysPrintTemplatesEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateEditPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除打印模板
		 * @param {number} id 模板Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateIdDeleteDelete(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 启用该模板
		 * @param {number} id
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateIdTypeEnablePut(id: number, type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateIdTypeEnablePut(id, type, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 分页查询打印模板
		 * @param {SysPrintTemplatesPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplatePagePost(body?: SysPrintTemplatesPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPrintTemplatesOutput>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplatePagePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 根据类型查询模板信息
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateTypeGetallGet(type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSysPrintTemplatesOutput>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateTypeGetallGet(type, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 还原模板
		 * @param {PrintTypeEnum} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiPrintTemplateTypeRestartPut(type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return PrintTemplateApiFp(configuration)
				.apiPrintTemplateTypeRestartPut(type, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * PrintTemplateApi - object-oriented interface
 * @export
 * @class PrintTemplateApi
 * @extends {BaseAPI}
 */
export class PrintTemplateApi extends BaseAPI {
	/**
	 *
	 * @summary 增加打印模板
	 * @param {SysPrintTemplatesInput} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateAddPost(body?: SysPrintTemplatesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateAddPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 更新打印模板
	 * @param {SysPrintTemplatesEditInput} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateEditPost(body?: SysPrintTemplatesEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateEditPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除打印模板
	 * @param {number} id 模板Id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateIdDeleteDelete(id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 启用该模板
	 * @param {number} id
	 * @param {PrintTypeEnum} type
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateIdTypeEnablePut(id: number, type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateIdTypeEnablePut(id, type, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 分页查询打印模板
	 * @param {SysPrintTemplatesPageInput} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplatePagePost(body?: SysPrintTemplatesPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPrintTemplatesOutput>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplatePagePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 根据类型查询模板信息
	 * @param {PrintTypeEnum} type
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateTypeGetallGet(type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSysPrintTemplatesOutput>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateTypeGetallGet(type, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 还原模板
	 * @param {PrintTypeEnum} type
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PrintTemplateApi
	 */
	public async apiPrintTemplateTypeRestartPut(type: PrintTypeEnum, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return PrintTemplateApiFp(this.configuration)
			.apiPrintTemplateTypeRestartPut(type, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
