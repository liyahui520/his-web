/* tslint:disable */
/* eslint-disable */
/**
 * 住院寄养
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import {
	AdminResultListInHospitalNurseOutput,
	AdminResultListInHospitalRoomsOutput,
	AdminResultSqlSugarPagedListInHospitalNurseOutput,
	AdminResultSqlSugarPagedListInHospitalOutput,
	AdminResultSqlSugarPagedListInHospitalRoomsOutput,
	InHospitalAddInput,
	InHospitalAddNursesInput,
	InHospitalDeleteInput,
	InHospitalNurseAddInput,
	InHospitalNurseDeleteInput,
	InHospitalNurseEditInput,
	InHospitalNurseListInput,
	InHospitalNursePageInput,
	InHospitalPageInput,
	InHospitalRoomsAddInput,
	InHospitalRoomsDeleteInput,
	InHospitalRoomsEditInput,
	InHospitalRoomsInput,
	InHospitalRoomsPageInput,
	OutHospitalInput,
	InHospitalNursesItemsInput,
	AdminResultListInHospitalNursesItemsDto,
	DeleteInHospitalNursesInput,
	UpdateInHospitalRoomsInput,
	AdminResultListInHospitalDailysOutput,
	InHospitalAddDailysInput,
	InHospitalDailysInput,
	InHospitalDeleteDailysInput
} from '../../models/cemrecord-manage';
/**
 * InHospitalApi - axios parameter creator
 * @export
 */
export const InHospitalApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
        /**
         * 
         * @summary 添加住院日常
         * @param {InHospitalAddDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInHospitalAddInHospitalsDailysPost: async (body?: InHospitalAddDailysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inHospital/add-in-hospitals-dailys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除住院日常
         * @param {InHospitalDeleteDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInHospitalDeleteInHospitalsDailysPost: async (body?: InHospitalDeleteDailysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inHospital/delete-in-hospitals-dailys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取住院日常
         * @param {InHospitalDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInHospitalGetInHospitalsDailysPost: async (body?: InHospitalDailysInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inHospital/get-in-hospitals-dailys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更换住院笼位信息
         * @param {UpdateInHospitalRoomsInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInHospitalUpdateInHospitalsRoomPost: async (body?: UpdateInHospitalRoomsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inHospital/update-in-hospitals-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
		/**
		 *
		 * @summary 删除住院护理项目
		 * @param {DeleteInHospitalNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalDeleteInHospitalsNursesPost: async (body?: DeleteInHospitalNursesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/delete-in-hospitals-nurses`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 添加住院护理项目
		 * @param {InHospitalAddNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalAddInHospitalsNursesPost: async (body?: InHospitalAddNursesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/add-in-hospitals-nurses`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 添加住院信息
		 * @param {InHospitalAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalAddInHospitalsPost: async (body?: InHospitalAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/add-in-hospitals`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 添加护理项目数据
		 * @param {InHospitalNurseAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalAddNursePost: async (body?: InHospitalNurseAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/add-nurse`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 添加房间数据
		 * @param {InHospitalRoomsAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalAddRoomsPost: async (body?: InHospitalRoomsAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/add-rooms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},

		/**
		 *
		 * @summary 删除住院信息
		 * @param {InHospitalDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalDeleteInHospitalsPost: async (body?: InHospitalDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/delete-in-hospitals`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除护理项目数据
		 * @param {InHospitalNurseDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalDeleteNursePost: async (body?: InHospitalNurseDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/delete-nurse`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除房间数据
		 * @param {InHospitalRoomsDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalDeleteRoomsPost: async (body?: InHospitalRoomsDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/delete-rooms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 编辑护理项目数据
		 * @param {InHospitalNurseEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalEditNursePost: async (body?: InHospitalNurseEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/edit-nurse`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 编辑房间数据
		 * @param {InHospitalRoomsEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalEditRoomsPost: async (body?: InHospitalRoomsEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/edit-rooms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetInHospitalsPagePost: async (body?: InHospitalPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-in-hospitals-page`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取护理项目数据
		 * @param {InHospitalNurseListInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetNurseListPost: async (body?: InHospitalNurseListInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-nurse-list`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 分页获取护理项目数据
		 * @param {InHospitalNursePageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetNursePagePost: async (body?: InHospitalNursePageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-nurse-page`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取房间数据
		 * @param {InHospitalRoomsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetRoomsListPost: async (body?: InHospitalRoomsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-rooms-list`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalRoomsPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetRoomsPagePost: async (body?: InHospitalRoomsPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-rooms-page`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 出院
		 * @param {OutHospitalInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalOutHospitalsPost: async (body?: OutHospitalInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/out-hospitals`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},

		/**
		 *
		 * @summary 获取住院护理项目
		 * @param {InHospitalNursesItemsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiInHospitalGetInHospitalNursesPost: async (body?: InHospitalNursesItemsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/inHospital/get-in-hospital-nurses`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * InHospitalApi - functional programming interface
 * @export
 */
export const InHospitalApiFp = function (configuration?: Configuration) {
	return {
        /**
         * 
         * @summary 添加住院日常
         * @param {InHospitalAddDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalAddInHospitalsDailysPost(body?: InHospitalAddDailysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalAddInHospitalsDailysPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除住院日常
         * @param {InHospitalDeleteDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalDeleteInHospitalsDailysPost(body?: InHospitalDeleteDailysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalDeleteInHospitalsDailysPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取住院日常
         * @param {InHospitalDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalGetInHospitalsDailysPost(body?: InHospitalDailysInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListInHospitalDailysOutput>>> {
            const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetInHospitalsDailysPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更换住院笼位信息
         * @param {UpdateInHospitalRoomsInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalUpdateInHospitalsRoomPost(body?: UpdateInHospitalRoomsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalUpdateInHospitalsRoomPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
		/**
		 *
		 * @summary 删除住院护理项目
		 * @param {DeleteInHospitalNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteInHospitalsNursesPost(
			body?: DeleteInHospitalNursesInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalDeleteInHospitalsNursesPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取住院护理项目
		 * @param {InHospitalNursesItemsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetInHospitalNursesPost(
			body?: InHospitalNursesItemsInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListInHospitalNursesItemsDto>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetInHospitalNursesPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 添加住院护理项目
		 * @param {InHospitalAddNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddInHospitalsNursesPost(body?: InHospitalAddNursesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalAddInHospitalsNursesPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 添加住院信息
		 * @param {InHospitalAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddInHospitalsPost(body?: InHospitalAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalAddInHospitalsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 添加护理项目数据
		 * @param {InHospitalNurseAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddNursePost(body?: InHospitalNurseAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalAddNursePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 添加房间数据
		 * @param {InHospitalRoomsAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddRoomsPost(body?: InHospitalRoomsAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalAddRoomsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除住院信息
		 * @param {InHospitalDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteInHospitalsPost(body?: InHospitalDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalDeleteInHospitalsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除护理项目数据
		 * @param {InHospitalNurseDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteNursePost(body?: InHospitalNurseDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalDeleteNursePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除房间数据
		 * @param {InHospitalRoomsDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteRoomsPost(body?: InHospitalRoomsDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalDeleteRoomsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 编辑护理项目数据
		 * @param {InHospitalNurseEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalEditNursePost(body?: InHospitalNurseEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalEditNursePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 编辑房间数据
		 * @param {InHospitalRoomsEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalEditRoomsPost(body?: InHospitalRoomsEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalEditRoomsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetInHospitalsPagePost(
			body?: InHospitalPageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalOutput>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetInHospitalsPagePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取护理项目数据
		 * @param {InHospitalNurseListInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetNurseListPost(
			body?: InHospitalNurseListInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListInHospitalNurseOutput>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetNurseListPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 分页获取护理项目数据
		 * @param {InHospitalNursePageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetNursePagePost(
			body?: InHospitalNursePageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalNurseOutput>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetNursePagePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取房间数据
		 * @param {InHospitalRoomsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetRoomsListPost(
			body?: InHospitalRoomsInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListInHospitalRoomsOutput>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetRoomsListPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalRoomsPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetRoomsPagePost(
			body?: InHospitalRoomsPageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalRoomsOutput>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalGetRoomsPagePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 出院
		 * @param {OutHospitalInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalOutHospitalsPost(body?: OutHospitalInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await InHospitalApiAxiosParamCreator(configuration).apiInHospitalOutHospitalsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
	};
};

/**
 * InHospitalApi - factory interface
 * @export
 */
export const InHospitalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	return {
        /**
         * 
         * @summary 添加住院日常
         * @param {InHospitalAddDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalAddInHospitalsDailysPost(body?: InHospitalAddDailysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return InHospitalApiFp(configuration).apiInHospitalAddInHospitalsDailysPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除住院日常
         * @param {InHospitalDeleteDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalDeleteInHospitalsDailysPost(body?: InHospitalDeleteDailysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return InHospitalApiFp(configuration).apiInHospitalDeleteInHospitalsDailysPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取住院日常
         * @param {InHospitalDailysInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalGetInHospitalsDailysPost(body?: InHospitalDailysInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalDailysOutput>> {
            return InHospitalApiFp(configuration).apiInHospitalGetInHospitalsDailysPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更换住院笼位信息
         * @param {UpdateInHospitalRoomsInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInHospitalUpdateInHospitalsRoomPost(body?: UpdateInHospitalRoomsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return InHospitalApiFp(configuration).apiInHospitalUpdateInHospitalsRoomPost(body, options).then((request) => request(axios, basePath));
        },
		/**
		 *
		 * @summary 删除住院护理项目
		 * @param {DeleteInHospitalNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteInHospitalsNursesPost(body?: DeleteInHospitalNursesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalDeleteInHospitalsNursesPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 添加住院护理项目
		 * @param {InHospitalAddNursesInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddInHospitalsNursesPost(body?: InHospitalAddNursesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalAddInHospitalsNursesPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 添加住院信息
		 * @param {InHospitalAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddInHospitalsPost(body?: InHospitalAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalAddInHospitalsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 添加护理项目数据
		 * @param {InHospitalNurseAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddNursePost(body?: InHospitalNurseAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalAddNursePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 添加房间数据
		 * @param {InHospitalRoomsAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalAddRoomsPost(body?: InHospitalRoomsAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalAddRoomsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除住院信息
		 * @param {InHospitalDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteInHospitalsPost(body?: InHospitalDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalDeleteInHospitalsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除护理项目数据
		 * @param {InHospitalNurseDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteNursePost(body?: InHospitalNurseDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalDeleteNursePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除房间数据
		 * @param {InHospitalRoomsDeleteInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalDeleteRoomsPost(body?: InHospitalRoomsDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalDeleteRoomsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 编辑护理项目数据
		 * @param {InHospitalNurseEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalEditNursePost(body?: InHospitalNurseEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalEditNursePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 编辑房间数据
		 * @param {InHospitalRoomsEditInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalEditRoomsPost(body?: InHospitalRoomsEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalEditRoomsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetInHospitalsPagePost(body?: InHospitalPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalOutput>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetInHospitalsPagePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取护理项目数据
		 * @param {InHospitalNurseListInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetNurseListPost(body?: InHospitalNurseListInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalNurseOutput>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetNurseListPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 分页获取护理项目数据
		 * @param {InHospitalNursePageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetNursePagePost(body?: InHospitalNursePageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalNurseOutput>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetNursePagePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取房间数据
		 * @param {InHospitalRoomsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetRoomsListPost(body?: InHospitalRoomsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalRoomsOutput>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetRoomsListPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 分页获取房间数据
		 * @param {InHospitalRoomsPageInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetRoomsPagePost(body?: InHospitalRoomsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalRoomsOutput>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetRoomsPagePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 出院
		 * @param {OutHospitalInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalOutHospitalsPost(body?: OutHospitalInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalOutHospitalsPost(body, options)
				.then((request) => request(axios, basePath));
		},

		/**
		 *
		 * @summary 获取住院护理项目
		 * @param {InHospitalNursesItemsInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiInHospitalGetInHospitalNursesPost(body?: InHospitalNursesItemsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalNursesItemsDto>> {
			return InHospitalApiFp(configuration)
				.apiInHospitalGetInHospitalNursesPost(body, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * InHospitalApi - object-oriented interface
 * @export
 * @class InHospitalApi
 * @extends {BaseAPI}
 */
export class InHospitalApi extends BaseAPI {
	/**
     * 
     * @summary 添加住院日常
     * @param {InHospitalAddDailysInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InHospitalApi
     */
    public async apiInHospitalAddInHospitalsDailysPost(body?: InHospitalAddDailysInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return InHospitalApiFp(this.configuration).apiInHospitalAddInHospitalsDailysPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除住院日常
     * @param {InHospitalDeleteDailysInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InHospitalApi
     */
    public async apiInHospitalDeleteInHospitalsDailysPost(body?: InHospitalDeleteDailysInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return InHospitalApiFp(this.configuration).apiInHospitalDeleteInHospitalsDailysPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取住院日常
     * @param {InHospitalDailysInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InHospitalApi
     */
    public async apiInHospitalGetInHospitalsDailysPost(body?: InHospitalDailysInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListInHospitalDailysOutput>> {
        return InHospitalApiFp(this.configuration).apiInHospitalGetInHospitalsDailysPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更换住院笼位信息
     * @param {UpdateInHospitalRoomsInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InHospitalApi
     */
    public async apiInHospitalUpdateInHospitalsRoomPost(body?: UpdateInHospitalRoomsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return InHospitalApiFp(this.configuration).apiInHospitalUpdateInHospitalsRoomPost(body, options).then((request) => request(this.axios, this.basePath));
    }
	/**
	 *
	 * @summary 删除住院护理项目
	 * @param {DeleteInHospitalNursesInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalDeleteInHospitalsNursesPost(body?: DeleteInHospitalNursesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalDeleteInHospitalsNursesPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 添加住院护理项目
	 * @param {InHospitalAddNursesInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalAddInHospitalsNursesPost(body?: InHospitalAddNursesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalAddInHospitalsNursesPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 添加住院信息
	 * @param {InHospitalAddInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalAddInHospitalsPost(body?: InHospitalAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalAddInHospitalsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 添加护理项目数据
	 * @param {InHospitalNurseAddInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalAddNursePost(body?: InHospitalNurseAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalAddNursePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 添加房间数据
	 * @param {InHospitalRoomsAddInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalAddRoomsPost(body?: InHospitalRoomsAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalAddRoomsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除住院信息
	 * @param {InHospitalDeleteInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalDeleteInHospitalsPost(body?: InHospitalDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalDeleteInHospitalsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除护理项目数据
	 * @param {InHospitalNurseDeleteInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalDeleteNursePost(body?: InHospitalNurseDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalDeleteNursePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除房间数据
	 * @param {InHospitalRoomsDeleteInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalDeleteRoomsPost(body?: InHospitalRoomsDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalDeleteRoomsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 编辑护理项目数据
	 * @param {InHospitalNurseEditInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalEditNursePost(body?: InHospitalNurseEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalEditNursePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 编辑房间数据
	 * @param {InHospitalRoomsEditInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalEditRoomsPost(body?: InHospitalRoomsEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalEditRoomsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 分页获取房间数据
	 * @param {InHospitalPageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetInHospitalsPagePost(body?: InHospitalPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalOutput>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetInHospitalsPagePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取护理项目数据
	 * @param {InHospitalNurseListInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetNurseListPost(body?: InHospitalNurseListInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalNurseOutput>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetNurseListPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 分页获取护理项目数据
	 * @param {InHospitalNursePageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetNursePagePost(body?: InHospitalNursePageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalNurseOutput>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetNursePagePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取房间数据
	 * @param {InHospitalRoomsInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetRoomsListPost(body?: InHospitalRoomsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalRoomsOutput>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetRoomsListPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 分页获取房间数据
	 * @param {InHospitalRoomsPageInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetRoomsPagePost(body?: InHospitalRoomsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListInHospitalRoomsOutput>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetRoomsPagePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 出院
	 * @param {OutHospitalInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalOutHospitalsPost(body?: OutHospitalInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalOutHospitalsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary 获取住院护理项目
	 * @param {InHospitalNursesItemsInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InHospitalApi
	 */
	public async apiInHospitalGetInHospitalNursesPost(body?: InHospitalNursesItemsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListInHospitalNursesItemsDto>> {
		return InHospitalApiFp(this.configuration)
			.apiInHospitalGetInHospitalNursesPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
