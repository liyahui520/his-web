/* tslint:disable */
/* eslint-disable */
/**
 * 病例管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import {
	AddCEMRecordDiagnosisDto,
	AddRecordTestInput,
	AdminResultBoolean,
	AdminResultCEMRecordAdvice,
	AdminResultCEMRecordPrescription,
	AdminResultCEMRecordTestDto,
	AdminResultInt32,
	AdminResultListCEMRecordPrescription,
	AdminResultListCEMRecordTestDto,
	AdminResultListDiagnosisTemps,
	AdminResultListDiagnosisTempsDto,
	CEMRecordAdvice,
	CEMRecordDiagnosis,
	RecordsPageInput,
	CEMRecordPrescriptionItem,
	GetCEMRecordInfoInput,
	CEMRecordPhysicalExamDetailDto,
	EditRecordTestInput,
	CEMRecord,
	AdminResultSqlSugarPagedListRecordsPageOutput,
	AdminResultListCEMRecordPhysicalExamTypeDto,
	AdminResultCEMRecordPhysicalExamDetailDto,
	AdminResultGetCEMRecordInfoOutput,
	CEMRecordPetInput,
	AdminResultSqlSugarPagedListCEMRecordPetOutput,
	CEMRecordItemGroupAddInput,
	CEMRecordItemGroupInput,
	AdminResultListCEMRecordItemGroupOutput,
} from '../../models/cemrecord-manage';
import { AdminResultObject } from '../../models/cemrecord-manage';
import { CEMRecordDto } from '../../models/cemrecord-manage';
import { CEMRecordZhuSuDto } from '../../models/cemrecord-manage';
import { RegType } from '../../models/cemrecord-manage';
/**
 * CEMRecordApi - axios parameter creator
 * @export
 */
export const CEMRecordApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 新增病例项目分组
		 * @param {CEMRecordItemGroupAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordAddCemRecordItemGroupPost: async (body?: CEMRecordItemGroupAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/add-cem-record-item-group`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取病例项目分组列表
		 * @param {CEMRecordItemGroupInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetCemRecordItemGroupsPost: async (body?: CEMRecordItemGroupInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/get-cem-record-item-groups`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取宠物病例列表
		 * @param {CEMRecordPetInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetPetCemRecordsPost: async (body?: CEMRecordPetInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/get-pet-cem-records`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 新增病例信息
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordAddPost: async (body?: CEMRecordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/add`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取病例信息 打印或者预览病例
		 * @param {GetCEMRecordInfoInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetCemRecordInfoPost: async (body?: GetCEMRecordInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/get-cem-record-info`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 病例列表查询
		 * @param {RecordsPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetCemRecordsPagePost: async (body?: RecordsPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/get-cem-records-page`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取疾病诊断
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetDiagnosisTempListNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			if (name === null || name === undefined) {
				throw new RequiredError('name', 'Required parameter name was null or undefined when calling apiCEMRecordGetDiagnosisTempListNameGet.');
			}
			const localVarPath = `/api/cEMRecord/get-diagnosis-temp-list/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(name)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 初始化获取体格检查信息
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordGetInitPhysicalExamGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/get-init-physical-exam`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 更改就诊医生
		 * @param {number} id
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordIdEditDoctorPut: async (id: number, body?: CEMRecordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordIdEditDoctorPut.');
			}
			const localVarPath = `/api/cEMRecord/{id}/edit-doctor`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 结束病例
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordIdEndPut: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordIdEndPut.');
			}
			const localVarPath = `/api/cEMRecord/{id}/end`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取指定病例信息
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordIdGetRecordByIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordIdGetRecordByIdGet.');
			}
			const localVarPath = `/api/cEMRecord/{id}/get-record-by-id`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 根据检验id查询检验项目
		 * @param {number} id 检验项目id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordIdGetTestsByIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordIdGetTestsByIdGet.');
			}
			const localVarPath = `/api/cEMRecord/{id}/get-tests-by-id`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 更改病例类型
		 * @param {number} id
		 * @param {RegType} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordIdTypeEditTypePut: async (id: number, type: RegType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordIdTypeEditTypePut.');
			}
			// verify required parameter 'type' is not null or undefined
			if (type === null || type === undefined) {
				throw new RequiredError('type', 'Required parameter type was null or undefined when calling apiCEMRecordIdTypeEditTypePut.');
			}
			const localVarPath = `/api/cEMRecord/{id}/{type}/edit-type`.replace(`{${'id'}}`, encodeURIComponent(String(id))).replace(`{${'type'}}`, encodeURIComponent(String(type)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 根据类型获取疾病诊断
		 * @param {number} parentId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordParentIdGetDiagnosisTempIdGet: async (parentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'parentId' is not null or undefined
			if (parentId === null || parentId === undefined) {
				throw new RequiredError('parentId', 'Required parameter parentId was null or undefined when calling apiCEMRecordParentIdGetDiagnosisTempIdGet.');
			}
			const localVarPath = `/api/cEMRecord/{parentId}/get-diagnosis-temp-id`.replace(`{${'parentId'}}`, encodeURIComponent(String(parentId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 获取体格检基本信息及其查项目和结果
		 * @param {number} recordId 病例Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordPhysicalExamDetailGet: async (recordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordPhysicalExamDetailGet.');
			}
			const localVarPath = `/api/cEMRecord/physical-exam-detail`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			if (recordId !== undefined) {
				localVarQueryParameter['recordId'] = recordId;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 更新体格检基本信息及其查项目检查结果
		 * @param {CEMRecordPhysicalExamDetailDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordPhysicalExamDetailPut: async (body?: CEMRecordPhysicalExamDetailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/physical-exam-detail`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 查询医嘱
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRecordIdGetAdviceByRecordIdGet: async (recordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRecordIdGetAdviceByRecordIdGet.');
			}
			const localVarPath = `/api/cEMRecord/{recordId}/get-advice-by-recordId`.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 新增医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {string} content
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdAddAdviceContentPost: async (regId: number, recordId: number, content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdAddAdviceContentPost.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdAddAdviceContentPost.');
			}
			// verify required parameter 'content' is not null or undefined
			if (content === null || content === undefined) {
				throw new RequiredError('content', 'Required parameter content was null or undefined when calling apiCEMRecordRegIdRecordIdAddAdviceContentPost.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/add-advice/{content}`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)))
				.replace(`{${'content'}}`, encodeURIComponent(String(content)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		// /**
		//  *
		//  * @summary 保存疾病诊断
		//  * @param {number} regId 挂号id
		//  * @param {number} recordId 诊疗id
		//  * @param {AddCEMRecordDiagnosisDto} [body] 疾病诊断
		//  * @param {*} [options] Override http request option.
		//  * @throws {RequiredError}
		//  */
		// apiCEMRecordRegIdRecordIdAddDiagnosisPost: async (regId: number, recordId: number, body?: AddCEMRecordDiagnosisDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
		// 	// verify required parameter 'regId' is not null or undefined
		// 	if (regId === null || regId === undefined) {
		// 		throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdAddDiagnosisPost.');
		// 	}
		// 	// verify required parameter 'recordId' is not null or undefined
		// 	if (recordId === null || recordId === undefined) {
		// 		throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdAddDiagnosisPost.');
		// 	}
		// 	const localVarPath = `/api/cEMRecord/{regId}/{recordId}/add-diagnosis`
		// 		.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
		// 		.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
		// 	// use dummy base URL string because the URL constructor only accepts absolute URLs.
		// 	const localVarUrlObj = new URL(localVarPath, 'https://example.com');
		// 	let baseOptions;
		// 	if (configuration) {
		// 		baseOptions = configuration.baseOptions;
		// 	}
		// 	const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
		// 	const localVarHeaderParameter = {} as any;
		// 	const localVarQueryParameter = {} as any;

		// 	// authentication Bearer required
		// 	// http bearer authentication required
		// 	if (configuration && configuration.accessToken) {
		// 		const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
		// 		localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
		// 	}

		// 	localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

		// 	const query = new URLSearchParams(localVarUrlObj.search);
		// 	for (const key in localVarQueryParameter) {
		// 		query.set(key, localVarQueryParameter[key]);
		// 	}
		// 	for (const key in options.params) {
		// 		query.set(key, options.params[key]);
		// 	}
		// 	localVarUrlObj.search = new URLSearchParams(query).toString();
		// 	let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
		// 	localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
		// 	const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
		// 	localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

		// 	return {
		// 		url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
		// 		options: localVarRequestOptions,
		// 	};
		// },
		/**
		 *
		 * @summary 保存处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdAddPrescriptionPost: async (regId: number, recordId: number, body?: Array<CEMRecordPrescriptionItem>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdAddPrescriptionPost.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdAddPrescriptionPost.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/add-prescription`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 保存检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {AddRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdAddTestsPost: async (regId: number, recordId: number, body?: AddRecordTestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdAddTestsPost.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdAddTestsPost.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/add-tests`.replace(`{${'regId'}}`, encodeURIComponent(String(regId))).replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 修改医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecordAdvice} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdEditAdvicePut: async (regId: number, recordId: number, body?: CEMRecordAdvice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdEditAdvicePut.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdEditAdvicePut.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/edit-advice`.replace(`{${'regId'}}`, encodeURIComponent(String(regId))).replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 修改疾病诊断
		 * @param {number} regId 挂号id
		 * @param {number} recordId 诊疗id
		 * @param {CEMRecordDiagnosis} [body] 疾病诊断
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdEditDiagnosisPut: async (regId: number, recordId: number, body?: CEMRecordDiagnosis, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdEditDiagnosisPut.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdEditDiagnosisPut.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/edit-diagnosis`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 修改检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {EditRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdEditTestsPut: async (regId: number, recordId: number, body?: EditRecordTestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdEditTestsPut.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdEditTestsPut.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/edit-tests`.replace(`{${'regId'}}`, encodeURIComponent(String(regId))).replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdGetPrescriptionsGet: async (regId: number, recordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdGetPrescriptionsGet.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdGetPrescriptionsGet.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/get-prescriptions`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 保存病例信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecord} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdGetRecordNewSavePost: async (regId: number, recordId: number, body?: CEMRecord, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdGetRecordNewSavePost.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdGetRecordNewSavePost.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/get-record-new-save`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 查询所有检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdGetTestsGet: async (regId: number, recordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdGetTestsGet.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdGetTestsGet.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/get-tests`.replace(`{${'regId'}}`, encodeURIComponent(String(regId))).replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete: async (regId: number, recordId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete.');
			}
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/{id}/delete-prescription`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)))
				.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除处方明细信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete: async (regId: number, recordId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete.');
			}
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/{id}/delete-prescription-item`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)))
				.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 编辑处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdIdEditPrescriptionPut: async (
			regId: number,
			recordId: number,
			id: number,
			body?: Array<CEMRecordPrescriptionItem>,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdIdEditPrescriptionPut.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdIdEditPrescriptionPut.');
			}
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordRegIdRecordIdIdEditPrescriptionPut.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/{id}/edit-prescription`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)))
				.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet: async (regId: number, recordId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet.');
			}
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet.');
			}
			const localVarPath = `/api/cEMRecord/{regId}/{recordId}/{id}/get-sing-prescriptions`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)))
				.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除检查项
		 * @param {number} testId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordTestIdDeleteTestsDelete: async (testId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'testId' is not null or undefined
			if (testId === null || testId === undefined) {
				throw new RequiredError('testId', 'Required parameter testId was null or undefined when calling apiCEMRecordTestIdDeleteTestsDelete.');
			}
			const localVarPath = `/api/cEMRecord/{testId}/delete-tests`.replace(`{${'testId'}}`, encodeURIComponent(String(testId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 删除检查项单项
		 * @param {number} testId
		 * @param {number} testItemId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete: async (testId: number, testItemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'testId' is not null or undefined
			if (testId === null || testId === undefined) {
				throw new RequiredError('testId', 'Required parameter testId was null or undefined when calling apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete.');
			}
			// verify required parameter 'testItemId' is not null or undefined
			if (testItemId === null || testItemId === undefined) {
				throw new RequiredError('testItemId', 'Required parameter testItemId was null or undefined when calling apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete.');
			}
			const localVarPath = `/api/cEMRecord/{testId}/{testItemId}/delete-tests-item`
				.replace(`{${'testId'}}`, encodeURIComponent(String(testId)))
				.replace(`{${'testItemId'}}`, encodeURIComponent(String(testItemId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 效验当前操作否当前责任医生
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordValidationDoctorRegIdRecordIdPost: async (regId: number, recordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'regId' is not null or undefined
			if (regId === null || regId === undefined) {
				throw new RequiredError('regId', 'Required parameter regId was null or undefined when calling apiCEMRecordValidationDoctorRegIdRecordIdPost.');
			}
			// verify required parameter 'recordId' is not null or undefined
			if (recordId === null || recordId === undefined) {
				throw new RequiredError('recordId', 'Required parameter recordId was null or undefined when calling apiCEMRecordValidationDoctorRegIdRecordIdPost.');
			}
			const localVarPath = `/api/cEMRecord/validationDoctor/{regId}/{recordId}`
				.replace(`{${'regId'}}`, encodeURIComponent(String(regId)))
				.replace(`{${'recordId'}}`, encodeURIComponent(String(recordId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary 新增/编辑主诉
		 * @param {CEMRecordZhuSuDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		apiCEMRecordZhusuAddEditPost: async (body?: CEMRecordZhuSuDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/cEMRecord/zhusu-add-edit`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, 'https://example.com');
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}
			const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication Bearer required
			// http bearer authentication required
			if (configuration && configuration.accessToken) {
				const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
				localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

			const query = new URLSearchParams(localVarUrlObj.search);
			for (const key in localVarQueryParameter) {
				query.set(key, localVarQueryParameter[key]);
			}
			for (const key in options.params) {
				query.set(key, options.params[key]);
			}
			localVarUrlObj.search = new URLSearchParams(query).toString();
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
			localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

			return {
				url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CEMRecordApi - functional programming interface
 * @export
 */
export const CEMRecordApiFp = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @summary 新增病例项目分组
		 * @param {CEMRecordItemGroupAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordAddCemRecordItemGroupPost(body?: CEMRecordItemGroupAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordAddCemRecordItemGroupPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取病例项目分组列表
		 * @param {CEMRecordItemGroupInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordItemGroupsPost(
			body?: CEMRecordItemGroupInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCEMRecordItemGroupOutput>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetCemRecordItemGroupsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取宠物病例列表
		 * @param {CEMRecordPetInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetPetCemRecordsPost(
			body?: CEMRecordPetInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListCEMRecordPetOutput>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetPetCemRecordsPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 新增病例信息
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordAddPost(body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordAddPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取病例信息 打印或者预览病例
		 * @param {GetCEMRecordInfoInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordInfoPost(
			body?: GetCEMRecordInfoInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultGetCEMRecordInfoOutput>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetCemRecordInfoPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 病例列表查询
		 * @param {RecordsPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordsPagePost(
			body?: RecordsPageInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListRecordsPageOutput>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetCemRecordsPagePost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取疾病诊断
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetDiagnosisTempListNameGet(
			name: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListDiagnosisTempsDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetDiagnosisTempListNameGet(name, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 初始化获取体格检查信息
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetInitPhysicalExamGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCEMRecordPhysicalExamTypeDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordGetInitPhysicalExamGet(options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 更改就诊医生
		 * @param {number} id
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdEditDoctorPut(id: number, body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordIdEditDoctorPut(id, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 结束病例
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdEndPut(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordIdEndPut(id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取指定病例信息
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdGetRecordByIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordIdGetRecordByIdGet(id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 根据检验id查询检验项目
		 * @param {number} id 检验项目id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdGetTestsByIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCEMRecordTestDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordIdGetTestsByIdGet(id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 更改病例类型
		 * @param {number} id
		 * @param {RegType} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdTypeEditTypePut(id: number, type: RegType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordIdTypeEditTypePut(id, type, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 根据类型获取疾病诊断
		 * @param {number} parentId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordParentIdGetDiagnosisTempIdGet(
			parentId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListDiagnosisTemps>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordParentIdGetDiagnosisTempIdGet(parentId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 获取体格检基本信息及其查项目和结果
		 * @param {number} recordId 病例Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordPhysicalExamDetailGet(
			recordId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordPhysicalExamDetailDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordPhysicalExamDetailGet(recordId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 更新体格检基本信息及其查项目检查结果
		 * @param {CEMRecordPhysicalExamDetailDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordPhysicalExamDetailPut(body?: CEMRecordPhysicalExamDetailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordPhysicalExamDetailPut(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 查询医嘱
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRecordIdGetAdviceByRecordIdGet(
			recordId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordAdvice>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRecordIdGetAdviceByRecordIdGet(recordId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 新增医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {string} content
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddAdviceContentPost(
			regId: number,
			recordId: number,
			content: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordAdvice>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdAddAdviceContentPost(regId, recordId, content, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		// /**
		//  *
		//  * @summary 保存疾病诊断
		//  * @param {number} regId 挂号id
		//  * @param {number} recordId 诊疗id
		//  * @param {AddCEMRecordDiagnosisDto} [body] 疾病诊断
		//  * @param {*} [options] Override http request option.
		//  * @throws {RequiredError}
		//  */
		// async apiCEMRecordRegIdRecordIdAddDiagnosisPost(
		// 	regId: number,
		// 	recordId: number,
		// 	body?: AddCEMRecordDiagnosisDto,
		// 	options?: AxiosRequestConfig
		// ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
		// 	const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdAddDiagnosisPost(regId, recordId, body, options);
		// 	return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
		// 		const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
		// 		return axios.request(axiosRequestArgs);
		// 	};
		// },
		/**
		 *
		 * @summary 保存处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddPrescriptionPost(
			regId: number,
			recordId: number,
			body?: Array<CEMRecordPrescriptionItem>,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdAddPrescriptionPost(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 保存检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {AddRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddTestsPost(
			regId: number,
			recordId: number,
			body?: AddRecordTestInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordTestDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdAddTestsPost(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 修改医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecordAdvice} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditAdvicePut(
			regId: number,
			recordId: number,
			body?: CEMRecordAdvice,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordAdvice>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdEditAdvicePut(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 修改疾病诊断
		 * @param {number} regId 挂号id
		 * @param {number} recordId 诊疗id
		 * @param {CEMRecordDiagnosis} [body] 疾病诊断
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditDiagnosisPut(
			regId: number,
			recordId: number,
			body?: CEMRecordDiagnosis,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdEditDiagnosisPut(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 修改检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {EditRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditTestsPut(
			regId: number,
			recordId: number,
			body?: EditRecordTestInput,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdEditTestsPut(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetPrescriptionsGet(
			regId: number,
			recordId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCEMRecordPrescription>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdGetPrescriptionsGet(regId, recordId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 保存病例信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecord} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetRecordNewSavePost(
			regId: number,
			recordId: number,
			body?: CEMRecord,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdGetRecordNewSavePost(regId, recordId, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 查询所有检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetTestsGet(
			regId: number,
			recordId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListCEMRecordTestDto>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdGetTestsGet(regId, recordId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(
			regId: number,
			recordId: number,
			id: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(regId, recordId, id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除处方明细信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(
			regId: number,
			recordId: number,
			id: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(regId, recordId, id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 编辑处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(
			regId: number,
			recordId: number,
			id: number,
			body?: Array<CEMRecordPrescriptionItem>,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(regId, recordId, id, body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(
			regId: number,
			recordId: number,
			id: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultCEMRecordPrescription>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(regId, recordId, id, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除检查项
		 * @param {number} testId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordTestIdDeleteTestsDelete(testId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordTestIdDeleteTestsDelete(testId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 删除检查项单项
		 * @param {number} testId
		 * @param {number} testItemId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(
			testId: number,
			testItemId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(testId, testItemId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 效验当前操作否当前责任医生
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordValidationDoctorRegIdRecordIdPost(
			regId: number,
			recordId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordValidationDoctorRegIdRecordIdPost(regId, recordId, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
		/**
		 *
		 * @summary 新增/编辑主诉
		 * @param {CEMRecordZhuSuDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordZhusuAddEditPost(body?: CEMRecordZhuSuDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
			const localVarAxiosArgs = await CEMRecordApiAxiosParamCreator(configuration).apiCEMRecordZhusuAddEditPost(body, options);
			return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
				const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
				return axios.request(axiosRequestArgs);
			};
		},
	};
};

/**
 * CEMRecordApi - factory interface
 * @export
 */
export const CEMRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	return {
		/**
		 *
		 * @summary 新增病例项目分组
		 * @param {CEMRecordItemGroupAddInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordAddCemRecordItemGroupPost(body?: CEMRecordItemGroupAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordAddCemRecordItemGroupPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取病例项目分组列表
		 * @param {CEMRecordItemGroupInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordItemGroupsPost(body?: CEMRecordItemGroupInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordItemGroupOutput>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetCemRecordItemGroupsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取宠物病例列表
		 * @param {CEMRecordPetInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetPetCemRecordsPost(body?: CEMRecordPetInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListCEMRecordPetOutput>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetPetCemRecordsPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 新增病例信息
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordAddPost(body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordAddPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取病例信息 打印或者预览病例
		 * @param {GetCEMRecordInfoInput} [body] 请求参数
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordInfoPost(body?: GetCEMRecordInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultGetCEMRecordInfoOutput>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetCemRecordInfoPost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 病例列表查询
		 * @param {RecordsPageInput} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetCemRecordsPagePost(body?: RecordsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListRecordsPageOutput>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetCemRecordsPagePost(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取疾病诊断
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetDiagnosisTempListNameGet(name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDiagnosisTempsDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetDiagnosisTempListNameGet(name, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 初始化获取体格检查信息
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordGetInitPhysicalExamGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordPhysicalExamTypeDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordGetInitPhysicalExamGet(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 更改就诊医生
		 * @param {number} id
		 * @param {CEMRecordDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdEditDoctorPut(id: number, body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordIdEditDoctorPut(id, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 结束病例
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdEndPut(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordIdEndPut(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取指定病例信息
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdGetRecordByIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordIdGetRecordByIdGet(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 根据检验id查询检验项目
		 * @param {number} id 检验项目id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdGetTestsByIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordTestDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordIdGetTestsByIdGet(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 更改病例类型
		 * @param {number} id
		 * @param {RegType} type
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordIdTypeEditTypePut(id: number, type: RegType, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordIdTypeEditTypePut(id, type, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 根据类型获取疾病诊断
		 * @param {number} parentId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordParentIdGetDiagnosisTempIdGet(parentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDiagnosisTemps>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordParentIdGetDiagnosisTempIdGet(parentId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 获取体格检基本信息及其查项目和结果
		 * @param {number} recordId 病例Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordPhysicalExamDetailGet(recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordPhysicalExamDetailDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordPhysicalExamDetailGet(recordId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 更新体格检基本信息及其查项目检查结果
		 * @param {CEMRecordPhysicalExamDetailDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordPhysicalExamDetailPut(body?: CEMRecordPhysicalExamDetailDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordPhysicalExamDetailPut(body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 查询医嘱
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRecordIdGetAdviceByRecordIdGet(recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRecordIdGetAdviceByRecordIdGet(recordId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 新增医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {string} content
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddAdviceContentPost(regId: number, recordId: number, content: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdAddAdviceContentPost(regId, recordId, content, options)
				.then((request) => request(axios, basePath));
		},
		// /**
		//  *
		//  * @summary 保存疾病诊断
		//  * @param {number} regId 挂号id
		//  * @param {number} recordId 诊疗id
		//  * @param {AddCEMRecordDiagnosisDto} [body] 疾病诊断
		//  * @param {*} [options] Override http request option.
		//  * @throws {RequiredError}
		//  */
		// async apiCEMRecordRegIdRecordIdAddDiagnosisPost(regId: number, recordId: number, body?: AddCEMRecordDiagnosisDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		// 	return CEMRecordApiFp(configuration)
		// 		.apiCEMRecordRegIdRecordIdAddDiagnosisPost(regId, recordId, body, options)
		// 		.then((request) => request(axios, basePath));
		// },
		/**
		 *
		 * @summary 保存处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddPrescriptionPost(regId: number, recordId: number, body?: Array<CEMRecordPrescriptionItem>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdAddPrescriptionPost(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 保存检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {AddRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdAddTestsPost(regId: number, recordId: number, body?: AddRecordTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordTestDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdAddTestsPost(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 修改医嘱
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecordAdvice} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditAdvicePut(regId: number, recordId: number, body?: CEMRecordAdvice, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdEditAdvicePut(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 修改疾病诊断
		 * @param {number} regId 挂号id
		 * @param {number} recordId 诊疗id
		 * @param {CEMRecordDiagnosis} [body] 疾病诊断
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditDiagnosisPut(regId: number, recordId: number, body?: CEMRecordDiagnosis, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdEditDiagnosisPut(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 修改检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {EditRecordTestInput} [body] 检验项目
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdEditTestsPut(regId: number, recordId: number, body?: EditRecordTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdEditTestsPut(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetPrescriptionsGet(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordPrescription>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdGetPrescriptionsGet(regId, recordId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 保存病例信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {CEMRecord} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetRecordNewSavePost(regId: number, recordId: number, body?: CEMRecord, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdGetRecordNewSavePost(regId, recordId, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 查询所有检验项目
		 * @param {number} regId 挂号Id
		 * @param {number} recordId 病例id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdGetTestsGet(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordTestDto>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdGetTestsGet(regId, recordId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(regId, recordId, id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除处方明细信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(regId, recordId, id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 编辑处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {Array<CEMRecordPrescriptionItem>} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(
			regId: number,
			recordId: number,
			id: number,
			body?: Array<CEMRecordPrescriptionItem>,
			options?: AxiosRequestConfig
		): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(regId, recordId, id, body, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 查询处方信息
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordPrescription>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(regId, recordId, id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除检查项
		 * @param {number} testId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordTestIdDeleteTestsDelete(testId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordTestIdDeleteTestsDelete(testId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 删除检查项单项
		 * @param {number} testId
		 * @param {number} testItemId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(testId: number, testItemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(testId, testItemId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 效验当前操作否当前责任医生
		 * @param {number} regId
		 * @param {number} recordId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordValidationDoctorRegIdRecordIdPost(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordValidationDoctorRegIdRecordIdPost(regId, recordId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary 新增/编辑主诉
		 * @param {CEMRecordZhuSuDto} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async apiCEMRecordZhusuAddEditPost(body?: CEMRecordZhuSuDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
			return CEMRecordApiFp(configuration)
				.apiCEMRecordZhusuAddEditPost(body, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * CEMRecordApi - object-oriented interface
 * @export
 * @class CEMRecordApi
 * @extends {BaseAPI}
 */
export class CEMRecordApi extends BaseAPI {
	/**
	 *
	 * @summary 新增病例项目分组
	 * @param {CEMRecordItemGroupAddInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordAddCemRecordItemGroupPost(body?: CEMRecordItemGroupAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordAddCemRecordItemGroupPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取病例项目分组列表
	 * @param {CEMRecordItemGroupInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetCemRecordItemGroupsPost(body?: CEMRecordItemGroupInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordItemGroupOutput>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetCemRecordItemGroupsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取宠物病例列表
	 * @param {CEMRecordPetInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetPetCemRecordsPost(body?: CEMRecordPetInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListCEMRecordPetOutput>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetPetCemRecordsPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 新增病例信息
	 * @param {CEMRecordDto} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordAddPost(body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordAddPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取病例信息 打印或者预览病例
	 * @param {GetCEMRecordInfoInput} [body] 请求参数
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetCemRecordInfoPost(body?: GetCEMRecordInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultGetCEMRecordInfoOutput>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetCemRecordInfoPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 病例列表查询
	 * @param {RecordsPageInput} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetCemRecordsPagePost(body?: RecordsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListRecordsPageOutput>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetCemRecordsPagePost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取疾病诊断
	 * @param {string} name
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetDiagnosisTempListNameGet(name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDiagnosisTempsDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetDiagnosisTempListNameGet(name, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 初始化获取体格检查信息
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordGetInitPhysicalExamGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordPhysicalExamTypeDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordGetInitPhysicalExamGet(options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 更改就诊医生
	 * @param {number} id
	 * @param {CEMRecordDto} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordIdEditDoctorPut(id: number, body?: CEMRecordDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordIdEditDoctorPut(id, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 结束病例
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordIdEndPut(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordIdEndPut(id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取指定病例信息
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordIdGetRecordByIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordIdGetRecordByIdGet(id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 根据检验id查询检验项目
	 * @param {number} id 检验项目id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordIdGetTestsByIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordTestDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordIdGetTestsByIdGet(id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 更改病例类型
	 * @param {number} id
	 * @param {RegType} type
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordIdTypeEditTypePut(id: number, type: RegType, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordIdTypeEditTypePut(id, type, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 根据类型获取疾病诊断
	 * @param {number} parentId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordParentIdGetDiagnosisTempIdGet(parentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDiagnosisTemps>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordParentIdGetDiagnosisTempIdGet(parentId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 获取体格检基本信息及其查项目和结果
	 * @param {number} recordId 病例Id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordPhysicalExamDetailGet(recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordPhysicalExamDetailDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordPhysicalExamDetailGet(recordId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 更新体格检基本信息及其查项目检查结果
	 * @param {CEMRecordPhysicalExamDetailDto} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordPhysicalExamDetailPut(body?: CEMRecordPhysicalExamDetailDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordPhysicalExamDetailPut(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 查询医嘱
	 * @param {number} recordId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRecordIdGetAdviceByRecordIdGet(recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRecordIdGetAdviceByRecordIdGet(recordId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 新增医嘱
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {string} content
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdAddAdviceContentPost(regId: number, recordId: number, content: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdAddAdviceContentPost(regId, recordId, content, options)
			.then((request) => request(this.axios, this.basePath));
	}
	// /**
	//  *
	//  * @summary 保存疾病诊断
	//  * @param {number} regId 挂号id
	//  * @param {number} recordId 诊疗id
	//  * @param {AddCEMRecordDiagnosisDto} [body] 疾病诊断
	//  * @param {*} [options] Override http request option.
	//  * @throws {RequiredError}
	//  * @memberof CEMRecordApi
	//  */
	// public async apiCEMRecordRegIdRecordIdAddDiagnosisPost(regId: number, recordId: number, body?: AddCEMRecordDiagnosisDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
	// 	return CEMRecordApiFp(this.configuration)
	// 		.apiCEMRecordRegIdRecordIdAddDiagnosisPost(regId, recordId, body, options)
	// 		.then((request) => request(this.axios, this.basePath));
	// }
	/**
	 *
	 * @summary 保存处方信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {Array<CEMRecordPrescriptionItem>} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdAddPrescriptionPost(regId: number, recordId: number, body?: Array<CEMRecordPrescriptionItem>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdAddPrescriptionPost(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 保存检验项目
	 * @param {number} regId 挂号Id
	 * @param {number} recordId 病例id
	 * @param {AddRecordTestInput} [body] 检验项目
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdAddTestsPost(regId: number, recordId: number, body?: AddRecordTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordTestDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdAddTestsPost(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 修改医嘱
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {CEMRecordAdvice} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdEditAdvicePut(regId: number, recordId: number, body?: CEMRecordAdvice, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordAdvice>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdEditAdvicePut(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 修改疾病诊断
	 * @param {number} regId 挂号id
	 * @param {number} recordId 诊疗id
	 * @param {CEMRecordDiagnosis} [body] 疾病诊断
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdEditDiagnosisPut(regId: number, recordId: number, body?: CEMRecordDiagnosis, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdEditDiagnosisPut(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 修改检验项目
	 * @param {number} regId 挂号Id
	 * @param {number} recordId 病例id
	 * @param {EditRecordTestInput} [body] 检验项目
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdEditTestsPut(regId: number, recordId: number, body?: EditRecordTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdEditTestsPut(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 查询处方信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdGetPrescriptionsGet(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordPrescription>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdGetPrescriptionsGet(regId, recordId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 保存病例信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {CEMRecord} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdGetRecordNewSavePost(regId: number, recordId: number, body?: CEMRecord, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdGetRecordNewSavePost(regId, recordId, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 查询所有检验项目
	 * @param {number} regId 挂号Id
	 * @param {number} recordId 病例id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdGetTestsGet(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListCEMRecordTestDto>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdGetTestsGet(regId, recordId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除处方信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdIdDeletePrescriptionDelete(regId, recordId, id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除处方明细信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdIdDeletePrescriptionItemDelete(regId, recordId, id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 编辑处方信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {number} id
	 * @param {Array<CEMRecordPrescriptionItem>} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(
		regId: number,
		recordId: number,
		id: number,
		body?: Array<CEMRecordPrescriptionItem>,
		options?: AxiosRequestConfig
	): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdIdEditPrescriptionPut(regId, recordId, id, body, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 查询处方信息
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(regId: number, recordId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultCEMRecordPrescription>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordRegIdRecordIdIdGetSingPrescriptionsGet(regId, recordId, id, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除检查项
	 * @param {number} testId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordTestIdDeleteTestsDelete(testId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordTestIdDeleteTestsDelete(testId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 删除检查项单项
	 * @param {number} testId
	 * @param {number} testItemId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(testId: number, testItemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordTestIdTestItemIdDeleteTestsItemDelete(testId, testItemId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 效验当前操作否当前责任医生
	 * @param {number} regId
	 * @param {number} recordId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordValidationDoctorRegIdRecordIdPost(regId: number, recordId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordValidationDoctorRegIdRecordIdPost(regId, recordId, options)
			.then((request) => request(this.axios, this.basePath));
	}
	/**
	 *
	 * @summary 新增/编辑主诉
	 * @param {CEMRecordZhuSuDto} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CEMRecordApi
	 */
	public async apiCEMRecordZhusuAddEditPost(body?: CEMRecordZhuSuDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
		return CEMRecordApiFp(this.configuration)
			.apiCEMRecordZhusuAddEditPost(body, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
