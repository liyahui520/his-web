/* tslint:disable */
/* eslint-disable */
/**
 * 数据导出
 * <br/><u><b><font color='FF0000'> 内部接口文档</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultIActionResult } from '../../models/import-manage';
import { AdminResultObject,ImportPcustomerDto } from '../../models/import-manage';
/**
 * ImportPcuPetApi - axios parameter creator
 * @export
 */
export const ImportPcuPetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载会员宠物导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportPcuPetDownPcuTemplatePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importPcuPet/down-pcu-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传execl获取会员宠物数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportPcuPetUploadPcuPostForm: async (info?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importPcuPet/upload-pcu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (info !== undefined) { 
                localVarFormParams.append('info', info as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传导入数据用户宠物
         * @param {Array<ImportPcustomerDto>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportPcuPetUploadServePcuPost: async (body?: Array<ImportPcustomerDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importPcuPet/upload-serve-pcu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportPcuPetApi - functional programming interface
 * @export
 */
export const ImportPcuPetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载会员宠物导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetDownPcuTemplatePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultIActionResult>>> {
            const localVarAxiosArgs = await ImportPcuPetApiAxiosParamCreator(configuration).apiImportPcuPetDownPcuTemplatePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传execl获取会员宠物数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetUploadPcuPostForm(info?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ImportPcuPetApiAxiosParamCreator(configuration).apiImportPcuPetUploadPcuPostForm(info, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传导入数据用户宠物
         * @param {Array<ImportPcustomerDto>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetUploadServePcuPost(body?: Array<ImportPcustomerDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ImportPcuPetApiAxiosParamCreator(configuration).apiImportPcuPetUploadServePcuPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImportPcuPetApi - factory interface
 * @export
 */
export const ImportPcuPetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 下载会员宠物导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetDownPcuTemplatePost(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultIActionResult>> {
            return ImportPcuPetApiFp(configuration).apiImportPcuPetDownPcuTemplatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传execl获取会员宠物数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetUploadPcuPostForm(info?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ImportPcuPetApiFp(configuration).apiImportPcuPetUploadPcuPostForm(info, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传导入数据用户宠物
         * @param {Array<ImportPcustomerDto>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportPcuPetUploadServePcuPost(body?: Array<ImportPcustomerDto>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ImportPcuPetApiFp(configuration).apiImportPcuPetUploadServePcuPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImportPcuPetApi - object-oriented interface
 * @export
 * @class ImportPcuPetApi
 * @extends {BaseAPI}
 */
export class ImportPcuPetApi extends BaseAPI {
    /**
     * 
     * @summary 下载会员宠物导入模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportPcuPetApi
     */
    public async apiImportPcuPetDownPcuTemplatePost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultIActionResult>> {
        return ImportPcuPetApiFp(this.configuration).apiImportPcuPetDownPcuTemplatePost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传execl获取会员宠物数据
     * @param {Blob} [info] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportPcuPetApi
     */
    public async apiImportPcuPetUploadPcuPostForm(info?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ImportPcuPetApiFp(this.configuration).apiImportPcuPetUploadPcuPostForm(info, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传导入数据用户宠物
     * @param {Array<ImportPcustomerDto>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportPcuPetApi
     */
    public async apiImportPcuPetUploadServePcuPost(body?: Array<ImportPcustomerDto>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ImportPcuPetApiFp(this.configuration).apiImportPcuPetUploadServePcuPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
