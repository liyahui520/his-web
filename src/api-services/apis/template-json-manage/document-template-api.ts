/* tslint:disable */
/* eslint-disable */
/**
 * 模板Json管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultSqlSugarPagedListSysDocumentTemplatesOutput } from '../../models/template-json-manage';
import { AdminResultListSysDocumentTemplatesDto } from '../../models/template-json-manage';
import { SysDocumentTemplatesInput } from '../../models/template-json-manage';
import { SysDocumentTemplatesDeleteInput } from '../../models/template-json-manage';
import { SysDocumentTemplatesEditInput } from '../../models/template-json-manage';
import { SysDocumentTemplatesPageInput } from '../../models/template-json-manage';
/**
 * DocumentTemplateApi - axios parameter creator
 * @export
 */
export const DocumentTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加文书模板
         * @param {SysDocumentTemplatesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplateAddPost: async (body?: SysDocumentTemplatesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documentTemplate/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除文书模板
         * @param {SysDocumentTemplatesDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplateDeleteDelete: async (body?: SysDocumentTemplatesDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documentTemplate/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新文书模板
         * @param {SysDocumentTemplatesEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplateEditPut: async (body?: SysDocumentTemplatesEditInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documentTemplate/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有医疗文书
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplateGetDocumentListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documentTemplate/get-document-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医疗文书重命名
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplateIdRenameNamePut: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDocumentTemplateIdRenameNamePut.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling apiDocumentTemplateIdRenameNamePut.');
            }
            const localVarPath = `/api/documentTemplate/{id}/rename/{name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询文书模板
         * @param {SysDocumentTemplatesPageInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTemplatePagePost: async (body?: SysDocumentTemplatesPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documentTemplate/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentTemplateApi - functional programming interface
 * @export
 */
export const DocumentTemplateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加文书模板
         * @param {SysDocumentTemplatesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateAddPost(body?: SysDocumentTemplatesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplateAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除文书模板
         * @param {SysDocumentTemplatesDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateDeleteDelete(body?: SysDocumentTemplatesDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplateDeleteDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新文书模板
         * @param {SysDocumentTemplatesEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateEditPut(body?: SysDocumentTemplatesEditInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplateEditPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有医疗文书
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateGetDocumentListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSysDocumentTemplatesDto>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplateGetDocumentListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医疗文书重命名
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateIdRenameNamePut(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplateIdRenameNamePut(id, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询文书模板
         * @param {SysDocumentTemplatesPageInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplatePagePost(body?: SysDocumentTemplatesPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSysDocumentTemplatesOutput>>> {
            const localVarAxiosArgs = await DocumentTemplateApiAxiosParamCreator(configuration).apiDocumentTemplatePagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentTemplateApi - factory interface
 * @export
 */
export const DocumentTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加文书模板
         * @param {SysDocumentTemplatesInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateAddPost(body?: SysDocumentTemplatesInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplateAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除文书模板
         * @param {SysDocumentTemplatesDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateDeleteDelete(body?: SysDocumentTemplatesDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplateDeleteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新文书模板
         * @param {SysDocumentTemplatesEditInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateEditPut(body?: SysDocumentTemplatesEditInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplateEditPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有医疗文书
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateGetDocumentListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSysDocumentTemplatesDto>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplateGetDocumentListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医疗文书重命名
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplateIdRenameNamePut(id: number, name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplateIdRenameNamePut(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询文书模板
         * @param {SysDocumentTemplatesPageInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTemplatePagePost(body?: SysDocumentTemplatesPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSysDocumentTemplatesOutput>> {
            return DocumentTemplateApiFp(configuration).apiDocumentTemplatePagePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentTemplateApi - object-oriented interface
 * @export
 * @class DocumentTemplateApi
 * @extends {BaseAPI}
 */
export class DocumentTemplateApi extends BaseAPI {
    /**
     * 
     * @summary 增加文书模板
     * @param {SysDocumentTemplatesInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplateAddPost(body?: SysDocumentTemplatesInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplateAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除文书模板
     * @param {SysDocumentTemplatesDeleteInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplateDeleteDelete(body?: SysDocumentTemplatesDeleteInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplateDeleteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新文书模板
     * @param {SysDocumentTemplatesEditInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplateEditPut(body?: SysDocumentTemplatesEditInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplateEditPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取所有医疗文书
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplateGetDocumentListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListSysDocumentTemplatesDto>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplateGetDocumentListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 医疗文书重命名
     * @param {number} id 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplateIdRenameNamePut(id: number, name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplateIdRenameNamePut(id, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询文书模板
     * @param {SysDocumentTemplatesPageInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTemplateApi
     */
    public async apiDocumentTemplatePagePost(body?: SysDocumentTemplatesPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListSysDocumentTemplatesOutput>> {
        return DocumentTemplateApiFp(this.configuration).apiDocumentTemplatePagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
