/* tslint:disable */
/* eslint-disable */
/**
 * Ë¥≠Áâ©ËΩ¶
 * <br/><u><b><font color='FF0000'> üëÆ‰∏çÂæóÂà©Áî®Êú¨È°πÁõÆ‰ªé‰∫ãÂç±ÂÆ≥ÂõΩÂÆ∂ÂÆâÂÖ®„ÄÅÊâ∞‰π±Á§æ‰ºöÁß©Â∫è„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõäÁ≠âÊ≥ïÂæãÊ≥ïËßÑÁ¶ÅÊ≠¢ÁöÑÊ¥ªÂä®ÔºÅ‰ªª‰ΩïÂü∫‰∫éÊú¨È°πÁõÆ‰∫åÊ¨°ÂºÄÂèëËÄå‰∫ßÁîüÁöÑ‰∏ÄÂàáÊ≥ïÂæãÁ∫†Á∫∑ÂíåË¥£‰ªªÔºåÊàë‰ª¨‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºÅ</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultListPaymentCarts } from '../../models/cart-manage';
import { AdminResultListPaymentCartsForCustomerOutput } from '../../models/cart-manage';
import { AdminResultListPaymentCartsGroupDateOutput } from '../../models/cart-manage';
import { AdminResultSqlSugarPagedListPaymentCartsPageOutput } from '../../models/cart-manage';
import { AdminResultPaymentCarts } from '../../models/cart-manage';
import { DeletePaymentCartsInput } from '../../models/cart-manage';
import { PaymentCartsAddInput } from '../../models/cart-manage';
import { PaymentCartsDeleteInput } from '../../models/cart-manage';
import { PaymentCartsForCustomerInput } from '../../models/cart-manage';
import { PaymentCartsPageInput } from '../../models/cart-manage';
import { PaymentCartsUpdateInput } from '../../models/cart-manage';
/**
 * PaymentCartsApi - axios parameter creator
 * @export
 */
export const PaymentCartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {

        /**
         * 
         * @summary Ëé∑ÂèñÂæÖ‰ªòÊ¨æÂàóË°®
         * @param {PaymentCartsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsGetPaymentCartsPagePost: async (body?: PaymentCartsPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/get-payment-carts-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Ê∑ªÂä†Ë¥≠Áâ©ËΩ¶
         * @param {Array<PaymentCartsAddInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsAddCartsForSalePost: async (body?: Array<PaymentCartsAddInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/add-carts-for-sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {PaymentCartsDeleteInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsDeleteCartsForSalePost: async (body?: PaymentCartsDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/delete-carts-for-sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {Array<DeletePaymentCartsInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsDeleteCartsPost: async (body?: Array<DeletePaymentCartsInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/delete-carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑ÂèäÂÆ†Áâ©idËé∑ÂèñÂØπÂ∫îÂæÖ‰ªòÊ¨æËÆ¢Âçï
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsGetPaymentCartsForCustomerPost: async (body?: PaymentCartsForCustomerInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/get-payment-carts-for-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÊó•ÊúüÂàÜÁªÑËé∑ÂèñË¥≠Áâ©ËΩ¶
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsGetPaymentCartsGroupDatePost: async (body?: PaymentCartsForCustomerInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/get-payment-carts-group-date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-‰øÆÊîπË¥≠Áâ©ËΩ¶ÂÜÖÂÆπ
         * @param {PaymentCartsUpdateInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentCartsUpdateCartsForSalePost: async (body?: PaymentCartsUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/paymentCarts/update-carts-for-sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentCartsApi - functional programming interface
 * @export
 */
export const PaymentCartsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Ê∑ªÂä†Ë¥≠Áâ©ËΩ¶
         * @param {Array<PaymentCartsAddInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsAddCartsForSalePost(body?: Array<PaymentCartsAddInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPaymentCarts>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsAddCartsForSalePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {PaymentCartsDeleteInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsDeleteCartsForSalePost(body?: PaymentCartsDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsDeleteCartsForSalePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {Array<DeletePaymentCartsInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsDeleteCartsPost(body?: Array<DeletePaymentCartsInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsDeleteCartsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑ÂèäÂÆ†Áâ©idËé∑ÂèñÂØπÂ∫îÂæÖ‰ªòÊ¨æËÆ¢Âçï
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsForCustomerPost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPaymentCartsForCustomerOutput>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsGetPaymentCartsForCustomerPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ê†πÊçÆÊó•ÊúüÂàÜÁªÑËé∑ÂèñË¥≠Áâ©ËΩ¶
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsGroupDatePost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListPaymentCartsGroupDateOutput>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsGetPaymentCartsGroupDatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Ëé∑ÂèñÂæÖ‰ªòÊ¨æÂàóË°®
         * @param {PaymentCartsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsPagePost(body?: PaymentCartsPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentCartsPageOutput>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsGetPaymentCartsPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-‰øÆÊîπË¥≠Áâ©ËΩ¶ÂÜÖÂÆπ
         * @param {PaymentCartsUpdateInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsUpdateCartsForSalePost(body?: PaymentCartsUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultPaymentCarts>>> {
            const localVarAxiosArgs = await PaymentCartsApiAxiosParamCreator(configuration).apiPaymentCartsUpdateCartsForSalePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentCartsApi - factory interface
 * @export
 */
export const PaymentCartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Ê∑ªÂä†Ë¥≠Áâ©ËΩ¶
         * @param {Array<PaymentCartsAddInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsAddCartsForSalePost(body?: Array<PaymentCartsAddInput>, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPaymentCarts>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsAddCartsForSalePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {PaymentCartsDeleteInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsDeleteCartsForSalePost(body?: PaymentCartsDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsDeleteCartsForSalePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Âà†Èô§Ë¥≠Áâ©ËΩ¶
         * @param {Array<DeletePaymentCartsInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsDeleteCartsPost(body?: Array<DeletePaymentCartsInput>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsDeleteCartsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ê†πÊçÆÁî®Êà∑ÂèäÂÆ†Áâ©idËé∑ÂèñÂØπÂ∫îÂæÖ‰ªòÊ¨æËÆ¢Âçï
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsForCustomerPost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPaymentCartsForCustomerOutput>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsGetPaymentCartsForCustomerPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ê†πÊçÆÊó•ÊúüÂàÜÁªÑËé∑ÂèñË¥≠Áâ©ËΩ¶
         * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsGroupDatePost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListPaymentCartsGroupDateOutput>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsGetPaymentCartsGroupDatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ëé∑ÂèñÂæÖ‰ªòÊ¨æÂàóË°®
         * @param {PaymentCartsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsGetPaymentCartsPagePost(body?: PaymentCartsPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentCartsPageOutput>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsGetPaymentCartsPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ÈîÄÂîÆ‰∫ßÂìÅ-‰øÆÊîπË¥≠Áâ©ËΩ¶ÂÜÖÂÆπ
         * @param {PaymentCartsUpdateInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentCartsUpdateCartsForSalePost(body?: PaymentCartsUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultPaymentCarts>> {
            return PaymentCartsApiFp(configuration).apiPaymentCartsUpdateCartsForSalePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentCartsApi - object-oriented interface
 * @export
 * @class PaymentCartsApi
 * @extends {BaseAPI}
 */
export class PaymentCartsApi extends BaseAPI {
    /**
     * 
     * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Ê∑ªÂä†Ë¥≠Áâ©ËΩ¶
     * @param {Array<PaymentCartsAddInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsAddCartsForSalePost(body?: Array<PaymentCartsAddInput>, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPaymentCarts>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsAddCartsForSalePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÈîÄÂîÆ‰∫ßÂìÅ-Âà†Èô§Ë¥≠Áâ©ËΩ¶
     * @param {PaymentCartsDeleteInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsDeleteCartsForSalePost(body?: PaymentCartsDeleteInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsDeleteCartsForSalePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Âà†Èô§Ë¥≠Áâ©ËΩ¶
     * @param {Array<DeletePaymentCartsInput>} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsDeleteCartsPost(body?: Array<DeletePaymentCartsInput>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsDeleteCartsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ê†πÊçÆÁî®Êà∑ÂèäÂÆ†Áâ©idËé∑ÂèñÂØπÂ∫îÂæÖ‰ªòÊ¨æËÆ¢Âçï
     * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsGetPaymentCartsForCustomerPost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPaymentCartsForCustomerOutput>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsGetPaymentCartsForCustomerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ê†πÊçÆÊó•ÊúüÂàÜÁªÑËé∑ÂèñË¥≠Áâ©ËΩ¶
     * @param {PaymentCartsForCustomerInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsGetPaymentCartsGroupDatePost(body?: PaymentCartsForCustomerInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListPaymentCartsGroupDateOutput>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsGetPaymentCartsGroupDatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Ëé∑ÂèñÂæÖ‰ªòÊ¨æÂàóË°®
     * @param {PaymentCartsPageInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsGetPaymentCartsPagePost(body?: PaymentCartsPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListPaymentCartsPageOutput>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsGetPaymentCartsPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ÈîÄÂîÆ‰∫ßÂìÅ-‰øÆÊîπË¥≠Áâ©ËΩ¶ÂÜÖÂÆπ
     * @param {PaymentCartsUpdateInput} [body] ËØ∑Ê±ÇÂèÇÊï∞
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentCartsApi
     */
    public async apiPaymentCartsUpdateCartsForSalePost(body?: PaymentCartsUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultPaymentCarts>> {
        return PaymentCartsApiFp(this.configuration).apiPaymentCartsUpdateCartsForSalePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
