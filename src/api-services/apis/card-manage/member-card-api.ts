/* tslint:disable */
/* eslint-disable */
/**
 * 会员卡管理
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError,BasePageInput } from '../../base';
import { AdminResultObject } from '../../models';
import { AddMemberCardInput,MemberCardRechargeInput,MemberCardReturnInput } from '../../models/card-manage';
import { AdminResultListMemberCardsOutInput } from '../../models/card-manage';
import { MemberCardRechargeDetailsDto } from '../../models/card-manage';
/**
 * MemberCardApi - axios parameter creator
 * @export
 */
export const MemberCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 新开会员卡
         * @param {AddMemberCardInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberCardAddMembercardPost: async (body?: AddMemberCardInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memberCard/add-membercard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 分页查询会员卡明细
         * @param {String} cardId
         * @param {BasePageInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberCardPagePost: async (cardId: String, body?: BasePageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling apiMemberCardCardIdPagePost.');
            }
            const localVarPath = `/api/memberCard/{cardId}/page`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 会员卡充值
         * @param {MemberCardRechargeInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberCardRanchargeMembercardPost: async (body?: MemberCardRechargeInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            
            const localVarPath = `/api/memberCard/rancharge-membercard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 会员卡退款
         * @param {MemberCardReturnInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemberCardReturnMembercardPost: async (body?: MemberCardReturnInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            
            const localVarPath = `/api/memberCard/return-membercard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据用户id获取会员卡信息
         * @param {String} customerId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetMembercardByCustomerIdGet: async (customerId: String, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling apiGetMembercardByCustomerIdGet.');
            }
            const localVarPath = `/api/memberCard/{customerId}/get-membercard-info`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberCardApi - functional programming interface
 * @export
 */
export const MemberCardApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary 新开会员卡
         * @param {AddMemberCardInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardAddMembercardPost(body?: AddMemberCardInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MemberCardApiAxiosParamCreator(configuration).apiMemberCardAddMembercardPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 分页查询会员卡明细
         * @param {String} cardId
         * @param {BasePageInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardPagePost(cardId: String, body?: BasePageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await MemberCardApiAxiosParamCreator(configuration).apiMemberCardPagePost(cardId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 会员卡充值
         * @param {String} cardId
         * @param {MemberCardRechargeInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardRanchargeMembercardPost(body?: MemberCardRechargeInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MemberCardApiAxiosParamCreator(configuration).apiMemberCardRanchargeMembercardPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 会员卡退款
         * @param {MemberCardReturnInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardReturnMembercardPost(body?: MemberCardReturnInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MemberCardApiAxiosParamCreator(configuration).apiMemberCardReturnMembercardPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 根据用户id获取会员卡信息
         * @param {String} customerId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMembercardByCustomerIdGet(customerId: String, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMemberCardsOutInput>>> {
            const localVarAxiosArgs = await MemberCardApiAxiosParamCreator(configuration).apiGetMembercardByCustomerIdGet(customerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MemberCardApi - factory interface
 * @export
 */
export const MemberCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 新开会员卡
         * @param {AddMemberCardInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardAddMembercardPost(body?: AddMemberCardInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MemberCardApiFp(configuration).apiMemberCardAddMembercardPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 分页查询会员卡明细
         * @param {String} cardId
         * @param {BasePageInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardPagePost(cardId: String, body?: BasePageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return MemberCardApiFp(configuration).apiMemberCardPagePost(cardId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 会员卡充值
         * @param {MemberCardRechargeInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardRanchargeMembercardPost(body?: MemberCardRechargeInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MemberCardApiFp(configuration).apiMemberCardRanchargeMembercardPost( body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 会员卡退款
         * @param {MemberCardReturnInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemberCardReturnMembercardPost(body?: MemberCardReturnInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MemberCardApiFp(configuration).apiMemberCardReturnMembercardPost( body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据用户id获取会员卡信息
         * @param {String} customerId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetMembercardByCustomerIdGet(customerId: String, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMemberCardsOutInput>> {
            return MemberCardApiFp(configuration).apiGetMembercardByCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberCardApi - object-oriented interface
 * @export
 * @class MemberCardApi
 * @extends {BaseAPI}
 */
export class MemberCardApi extends BaseAPI {
    /**
     *
     * @summary 新开会员卡
     * @param {AddMemberCardInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberCardApi
     */
    public async apiMemberCardAddMembercardPost(body?: AddMemberCardInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MemberCardApiFp(this.configuration).apiMemberCardAddMembercardPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 分页查询会员卡明细
     * @param {String} cardId
     * @param {BasePageInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberCardApi
     */
    public async apiMemberCardPagePost(cardId: String, body?: BasePageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return MemberCardApiFp(this.configuration).apiMemberCardPagePost(cardId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 会员卡充值
     * @param {MemberCardRechargeInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberCardApi
     */
    public async apiMemberCardRanchargeMembercardPost(body?: MemberCardRechargeInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MemberCardApiFp(this.configuration).apiMemberCardRanchargeMembercardPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 会员卡退款
     * @param {MemberCardReturnInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberCardApi
     */
    public async apiMemberCardReturnMembercardPost(body?: MemberCardReturnInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MemberCardApiFp(this.configuration).apiMemberCardReturnMembercardPost( body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据用户id获取会员卡信息
     * @param {String} customerId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberCardApi
     */
    public async apiGetMembercardByCustomerIdGet(customerId: String, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMemberCardsOutInput>> {
        return MemberCardApiFp(this.configuration).apiGetMembercardByCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}
