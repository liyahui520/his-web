/* tslint:disable */
/* eslint-disable */
/**
 * 数据导出
 * <br/><u><b><font color='FF0000'> 内部接口文档</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultIActionResult } from '../../models/import-manage';
import { AdminResultObject } from '../../models/import-manage';
import { ImportDrugsDto } from '../../models/import-manage';
import { ProductTypeEnums } from '../../models/import-manage';
/**
 * ImportProductApi - axios parameter creator
 * @export
 */
export const ImportProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载产品信息导入模板
         * @param {ProductTypeEnums} input &lt;br /&gt;&amp;nbsp;商品 Goods &#x3D; 10001&lt;br /&gt;&amp;nbsp;药品 Drugs &#x3D; 20001&lt;br /&gt;&amp;nbsp;美容 Cosmetologys &#x3D; 30001&lt;br /&gt;&amp;nbsp;洗澡 Washs &#x3D; 40001&lt;br /&gt;&amp;nbsp;驱虫 Defaunations &#x3D; 50001&lt;br /&gt;&amp;nbsp;疫苗 Vaccines &#x3D; 60001&lt;br /&gt;&amp;nbsp;住院 Hospitals &#x3D; 70001&lt;br /&gt;&amp;nbsp;留观 Fosters &#x3D; 80001&lt;br /&gt;&amp;nbsp;超声检查 BModes &#x3D; 90001&lt;br /&gt;&amp;nbsp;摄影检查 XRays &#x3D; 100001&lt;br /&gt;&amp;nbsp;化验 Tests &#x3D; 110001&lt;br /&gt;&amp;nbsp;处置 Disposals &#x3D; 120001&lt;br /&gt;&amp;nbsp;显微镜 Microscopes &#x3D; 130001&lt;br /&gt;&amp;nbsp;消耗品 Consumables &#x3D; 140001&lt;br /&gt;&amp;nbsp;试纸 Papers &#x3D; 150001&lt;br /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportProductDownProductDrugTemplateInputGet: async (input: ProductTypeEnums, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input','Required parameter input was null or undefined when calling apiImportProductDownProductDrugTemplateInputGet.');
            }
            const localVarPath = `/api/importProduct/down-product-drug-template/{input}`
                .replace(`{${"input"}}`, encodeURIComponent(String(input)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存execl产品信息数据
         * @param {Array<ImportDrugsDto>} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportProductSaveProductDrugPost: async (body?: Array<ImportDrugsDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importProduct/save-product-drug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 验证execl产品信息数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImportProductValidateProductDrugPostForm: async (info?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importProduct/validate-product-drug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (info !== undefined) { 
                localVarFormParams.append('info', info as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportProductApi - functional programming interface
 * @export
 */
export const ImportProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载产品信息导入模板
         * @param {ProductTypeEnums} input &lt;br /&gt;&amp;nbsp;商品 Goods &#x3D; 10001&lt;br /&gt;&amp;nbsp;药品 Drugs &#x3D; 20001&lt;br /&gt;&amp;nbsp;美容 Cosmetologys &#x3D; 30001&lt;br /&gt;&amp;nbsp;洗澡 Washs &#x3D; 40001&lt;br /&gt;&amp;nbsp;驱虫 Defaunations &#x3D; 50001&lt;br /&gt;&amp;nbsp;疫苗 Vaccines &#x3D; 60001&lt;br /&gt;&amp;nbsp;住院 Hospitals &#x3D; 70001&lt;br /&gt;&amp;nbsp;留观 Fosters &#x3D; 80001&lt;br /&gt;&amp;nbsp;超声检查 BModes &#x3D; 90001&lt;br /&gt;&amp;nbsp;摄影检查 XRays &#x3D; 100001&lt;br /&gt;&amp;nbsp;化验 Tests &#x3D; 110001&lt;br /&gt;&amp;nbsp;处置 Disposals &#x3D; 120001&lt;br /&gt;&amp;nbsp;显微镜 Microscopes &#x3D; 130001&lt;br /&gt;&amp;nbsp;消耗品 Consumables &#x3D; 140001&lt;br /&gt;&amp;nbsp;试纸 Papers &#x3D; 150001&lt;br /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductDownProductDrugTemplateInputGet(input: ProductTypeEnums, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultIActionResult>>> {
            const localVarAxiosArgs = await ImportProductApiAxiosParamCreator(configuration).apiImportProductDownProductDrugTemplateInputGet(input, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 保存execl产品信息数据
         * @param {Array<ImportDrugsDto>} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductSaveProductDrugPost(body?: Array<ImportDrugsDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ImportProductApiAxiosParamCreator(configuration).apiImportProductSaveProductDrugPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 验证execl产品信息数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductValidateProductDrugPostForm(info?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await ImportProductApiAxiosParamCreator(configuration).apiImportProductValidateProductDrugPostForm(info, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImportProductApi - factory interface
 * @export
 */
export const ImportProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 下载产品信息导入模板
         * @param {ProductTypeEnums} input &lt;br /&gt;&amp;nbsp;商品 Goods &#x3D; 10001&lt;br /&gt;&amp;nbsp;药品 Drugs &#x3D; 20001&lt;br /&gt;&amp;nbsp;美容 Cosmetologys &#x3D; 30001&lt;br /&gt;&amp;nbsp;洗澡 Washs &#x3D; 40001&lt;br /&gt;&amp;nbsp;驱虫 Defaunations &#x3D; 50001&lt;br /&gt;&amp;nbsp;疫苗 Vaccines &#x3D; 60001&lt;br /&gt;&amp;nbsp;住院 Hospitals &#x3D; 70001&lt;br /&gt;&amp;nbsp;留观 Fosters &#x3D; 80001&lt;br /&gt;&amp;nbsp;超声检查 BModes &#x3D; 90001&lt;br /&gt;&amp;nbsp;摄影检查 XRays &#x3D; 100001&lt;br /&gt;&amp;nbsp;化验 Tests &#x3D; 110001&lt;br /&gt;&amp;nbsp;处置 Disposals &#x3D; 120001&lt;br /&gt;&amp;nbsp;显微镜 Microscopes &#x3D; 130001&lt;br /&gt;&amp;nbsp;消耗品 Consumables &#x3D; 140001&lt;br /&gt;&amp;nbsp;试纸 Papers &#x3D; 150001&lt;br /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductDownProductDrugTemplateInputGet(input: ProductTypeEnums, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultIActionResult>> {
            return ImportProductApiFp(configuration).apiImportProductDownProductDrugTemplateInputGet(input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存execl产品信息数据
         * @param {Array<ImportDrugsDto>} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductSaveProductDrugPost(body?: Array<ImportDrugsDto>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ImportProductApiFp(configuration).apiImportProductSaveProductDrugPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 验证execl产品信息数据
         * @param {Blob} [info] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImportProductValidateProductDrugPostForm(info?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return ImportProductApiFp(configuration).apiImportProductValidateProductDrugPostForm(info, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImportProductApi - object-oriented interface
 * @export
 * @class ImportProductApi
 * @extends {BaseAPI}
 */
export class ImportProductApi extends BaseAPI {
    /**
     * 
     * @summary 下载产品信息导入模板
     * @param {ProductTypeEnums} input &lt;br /&gt;&amp;nbsp;商品 Goods &#x3D; 10001&lt;br /&gt;&amp;nbsp;药品 Drugs &#x3D; 20001&lt;br /&gt;&amp;nbsp;美容 Cosmetologys &#x3D; 30001&lt;br /&gt;&amp;nbsp;洗澡 Washs &#x3D; 40001&lt;br /&gt;&amp;nbsp;驱虫 Defaunations &#x3D; 50001&lt;br /&gt;&amp;nbsp;疫苗 Vaccines &#x3D; 60001&lt;br /&gt;&amp;nbsp;住院 Hospitals &#x3D; 70001&lt;br /&gt;&amp;nbsp;留观 Fosters &#x3D; 80001&lt;br /&gt;&amp;nbsp;超声检查 BModes &#x3D; 90001&lt;br /&gt;&amp;nbsp;摄影检查 XRays &#x3D; 100001&lt;br /&gt;&amp;nbsp;化验 Tests &#x3D; 110001&lt;br /&gt;&amp;nbsp;处置 Disposals &#x3D; 120001&lt;br /&gt;&amp;nbsp;显微镜 Microscopes &#x3D; 130001&lt;br /&gt;&amp;nbsp;消耗品 Consumables &#x3D; 140001&lt;br /&gt;&amp;nbsp;试纸 Papers &#x3D; 150001&lt;br /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportProductApi
     */
    public async apiImportProductDownProductDrugTemplateInputGet(input: ProductTypeEnums, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultIActionResult>> {
        return ImportProductApiFp(this.configuration).apiImportProductDownProductDrugTemplateInputGet(input, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 保存execl产品信息数据
     * @param {Array<ImportDrugsDto>} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportProductApi
     */
    public async apiImportProductSaveProductDrugPost(body?: Array<ImportDrugsDto>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ImportProductApiFp(this.configuration).apiImportProductSaveProductDrugPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 验证execl产品信息数据
     * @param {Blob} [info] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportProductApi
     */
    public async apiImportProductValidateProductDrugPostForm(info?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return ImportProductApiFp(this.configuration).apiImportProductValidateProductDrugPostForm(info, options).then((request) => request(this.axios, this.basePath));
    }
}
