/* tslint:disable */
/* eslint-disable */
/**
 * 驱虫疫苗
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultListVaccinationIssueOutput } from '../../models/cemrecord-manage';
import { AdminResultListVaccinationOutput } from '../../models/cemrecord-manage';
import { AdminResultSqlSugarPagedListVaccinationOutput } from '../../models/cemrecord-manage';
import { AdminResultVaccinationDetailsOutput } from '../../models';
import { VaccinationByPetInput } from '../../models/cemrecord-manage';
import { VaccinationDetailInfo } from '../../models/cemrecord-manage';
import { VaccinationInput } from '../../models/cemrecord-manage';
import { VaccinationIssueInput } from '../../models/cemrecord-manage';
import { VaccinationOptionInput } from '../../models/cemrecord-manage';
import { VaccinationPageInput } from '../../models/cemrecord-manage';
/**
 * VaccinationApi - axios parameter creator
 * @export
 */
export const VaccinationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationAddVaccinationPost: async (body?: VaccinationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/add-vaccination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationEditVaccinationPost: async (body?: VaccinationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/edit-vaccination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取接种信息
         * @param {VaccinationDetailInfo} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationGetVaccinationDetailPost: async (body?: VaccinationDetailInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/get-vaccination-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据宠物获取全部驱虫疫苗
         * @param {VaccinationByPetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationGetVaccinationListByPetPost: async (body?: VaccinationByPetInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/get-vaccination-list-by-pet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取驱虫疫苗
         * @param {VaccinationIssueInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationGetVaccinationListPost: async (body?: VaccinationIssueInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/get-vaccination-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取分页驱虫疫苗
         * @param {VaccinationPageInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationGetVaccinationPageListPost: async (body?: VaccinationPageInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/get-vaccination-page-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驱虫疫苗延迟
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationVaccinationDelayPost: async (body?: VaccinationOptionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/vaccination-delay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驱虫疫苗删除
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationVaccinationDeletePost: async (body?: VaccinationOptionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/vaccination-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驱虫疫苗执行
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationVaccinationExecPost: async (body?: VaccinationOptionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/vaccination-exec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驱虫疫苗下单
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVaccinationVaccinationPlaceOrderPost: async (body?: VaccinationOptionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vaccination/vaccination-place-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaccinationApi - functional programming interface
 * @export
 */
export const VaccinationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationAddVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationAddVaccinationPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationEditVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationEditVaccinationPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取接种信息
         * @param {VaccinationDetailInfo} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationDetailPost(body?: VaccinationDetailInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultVaccinationDetailsOutput>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationGetVaccinationDetailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据宠物获取全部驱虫疫苗
         * @param {VaccinationByPetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationListByPetPost(body?: VaccinationByPetInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListVaccinationOutput>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationGetVaccinationListByPetPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取驱虫疫苗
         * @param {VaccinationIssueInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationListPost(body?: VaccinationIssueInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListVaccinationIssueOutput>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationGetVaccinationListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取分页驱虫疫苗
         * @param {VaccinationPageInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationPageListPost(body?: VaccinationPageInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListVaccinationOutput>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationGetVaccinationPageListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 驱虫疫苗延迟
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationDelayPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationVaccinationDelayPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 驱虫疫苗删除
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationDeletePost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationVaccinationDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 驱虫疫苗执行
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationExecPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationVaccinationExecPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 驱虫疫苗下单
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationPlaceOrderPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VaccinationApiAxiosParamCreator(configuration).apiVaccinationVaccinationPlaceOrderPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VaccinationApi - factory interface
 * @export
 */
export const VaccinationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationAddVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationAddVaccinationPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑接种信息
         * @param {VaccinationInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationEditVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationEditVaccinationPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取接种信息
         * @param {VaccinationDetailInfo} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationDetailPost(body?: VaccinationDetailInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultVaccinationDetailsOutput>> {
            return VaccinationApiFp(configuration).apiVaccinationGetVaccinationDetailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据宠物获取全部驱虫疫苗
         * @param {VaccinationByPetInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationListByPetPost(body?: VaccinationByPetInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListVaccinationOutput>> {
            return VaccinationApiFp(configuration).apiVaccinationGetVaccinationListByPetPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取驱虫疫苗
         * @param {VaccinationIssueInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationListPost(body?: VaccinationIssueInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListVaccinationIssueOutput>> {
            return VaccinationApiFp(configuration).apiVaccinationGetVaccinationListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取分页驱虫疫苗
         * @param {VaccinationPageInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationGetVaccinationPageListPost(body?: VaccinationPageInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListVaccinationOutput>> {
            return VaccinationApiFp(configuration).apiVaccinationGetVaccinationPageListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驱虫疫苗延迟
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationDelayPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationVaccinationDelayPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驱虫疫苗删除
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationDeletePost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationVaccinationDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驱虫疫苗执行
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationExecPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationVaccinationExecPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驱虫疫苗下单
         * @param {VaccinationOptionInput} [body] 请求参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVaccinationVaccinationPlaceOrderPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VaccinationApiFp(configuration).apiVaccinationVaccinationPlaceOrderPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VaccinationApi - object-oriented interface
 * @export
 * @class VaccinationApi
 * @extends {BaseAPI}
 */
export class VaccinationApi extends BaseAPI {
    /**
     * 
     * @summary 创建接种信息
     * @param {VaccinationInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationAddVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationAddVaccinationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑接种信息
     * @param {VaccinationInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationEditVaccinationPost(body?: VaccinationInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationEditVaccinationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取接种信息
     * @param {VaccinationDetailInfo} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationGetVaccinationDetailPost(body?: VaccinationDetailInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultVaccinationDetailsOutput>> {
        return VaccinationApiFp(this.configuration).apiVaccinationGetVaccinationDetailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据宠物获取全部驱虫疫苗
     * @param {VaccinationByPetInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationGetVaccinationListByPetPost(body?: VaccinationByPetInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListVaccinationOutput>> {
        return VaccinationApiFp(this.configuration).apiVaccinationGetVaccinationListByPetPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取驱虫疫苗
     * @param {VaccinationIssueInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationGetVaccinationListPost(body?: VaccinationIssueInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListVaccinationIssueOutput>> {
        return VaccinationApiFp(this.configuration).apiVaccinationGetVaccinationListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取分页驱虫疫苗
     * @param {VaccinationPageInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationGetVaccinationPageListPost(body?: VaccinationPageInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListVaccinationOutput>> {
        return VaccinationApiFp(this.configuration).apiVaccinationGetVaccinationPageListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 驱虫疫苗延迟
     * @param {VaccinationOptionInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationVaccinationDelayPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationVaccinationDelayPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 驱虫疫苗删除
     * @param {VaccinationOptionInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationVaccinationDeletePost(body?: VaccinationOptionInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationVaccinationDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 驱虫疫苗执行
     * @param {VaccinationOptionInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationVaccinationExecPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationVaccinationExecPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 驱虫疫苗下单
     * @param {VaccinationOptionInput} [body] 请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationApi
     */
    public async apiVaccinationVaccinationPlaceOrderPost(body?: VaccinationOptionInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VaccinationApiFp(this.configuration).apiVaccinationVaccinationPlaceOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
