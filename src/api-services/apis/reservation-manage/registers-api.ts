/* tslint:disable */
/* eslint-disable */
/**
 * 挂号服务
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
import { AdminResultObject } from '../../models/register-manage';
import { PageRegisters } from '../../models/register-manage';
import { RegistersDto } from '../../models/register-manage';
import { RegistersInput } from '../../models/register-manage';
import { AdminResultRegisters } from '../../models/register-manage';
/**
 * RegistersApi - axios parameter creator
 * @export
 */
export const RegistersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 新增挂号信息
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersAddPost: async (body?: RegistersDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/registers/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除挂号信息
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersDeleteIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiRegistersDeleteIdDelete.');
            }
            const localVarPath = `/api/registers/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 查询挂号信息
         * @param {RegistersInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersGetPost: async (body?: RegistersInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/registers/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询单个挂号信息
         * @param {number} id 挂号Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersGetIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiRegistersGetIdGet.');
            }
            const localVarPath = `/api/registers/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 修改挂号信息
         * @param {number} id
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersIdEditPut: async (id: number, body?: RegistersDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiRegistersIdEditPut.');
            }
            const localVarPath = `/api/registers/{id}/edit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 开始诊疗
         * @param {number} id 挂号id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersIdStartTrantPut: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiRegistersIdStartTrantPut.');
            }
            const localVarPath = `/api/registers/{id}/start-trant`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 分页查询挂号信息
         * @param {PageRegisters} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistersPagePost: async (body?: PageRegisters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/registers/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistersApi - functional programming interface
 * @export
 */
export const RegistersApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary 新增挂号信息
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersAddPost(body?: RegistersDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },

        /**
         * 
         * @summary 查询单个挂号信息
         * @param {number} id 挂号Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersGetIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultRegisters>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersGetIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 删除挂号信息
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersDeleteIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersDeleteIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 查询挂号信息
         * @param {RegistersInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersGetPost(body?: RegistersInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersGetPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 修改挂号信息
         * @param {number} id
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersIdEditPut(id: number, body?: RegistersDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersIdEditPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 开始诊疗
         * @param {number} id 挂号id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersIdStartTrantPut(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersIdStartTrantPut(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 分页查询挂号信息
         * @param {PageRegisters} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersPagePost(body?: PageRegisters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultObject>>> {
            const localVarAxiosArgs = await RegistersApiAxiosParamCreator(configuration).apiRegistersPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RegistersApi - factory interface
 * @export
 */
export const RegistersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 新增挂号信息
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersAddPost(body?: RegistersDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return RegistersApiFp(configuration).apiRegistersAddPost(body, options).then((request) => request(axios, basePath));
        },

        /**
         * 
         * @summary 查询单个挂号信息
         * @param {number} id 挂号Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersGetIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultRegisters>> {
            return RegistersApiFp(configuration).apiRegistersGetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除挂号信息
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersDeleteIdDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return RegistersApiFp(configuration).apiRegistersDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查询挂号信息
         * @param {RegistersInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersGetPost(body?: RegistersInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return RegistersApiFp(configuration).apiRegistersGetPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 修改挂号信息
         * @param {number} id
         * @param {RegistersDto} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersIdEditPut(id: number, body?: RegistersDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return RegistersApiFp(configuration).apiRegistersIdEditPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 开始诊疗
         * @param {number} id 挂号id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersIdStartTrantPut(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return RegistersApiFp(configuration).apiRegistersIdStartTrantPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 分页查询挂号信息
         * @param {PageRegisters} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistersPagePost(body?: PageRegisters, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultObject>> {
            return RegistersApiFp(configuration).apiRegistersPagePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistersApi - object-oriented interface
 * @export
 * @class RegistersApi
 * @extends {BaseAPI}
 */
export class RegistersApi extends BaseAPI {
    /**
     *
     * @summary 新增挂号信息
     * @param {RegistersDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersAddPost(body?: RegistersDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return RegistersApiFp(this.configuration).apiRegistersAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询单个挂号信息
     * @param {number} id 挂号Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersGetIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultRegisters>> {
        return RegistersApiFp(this.configuration).apiRegistersGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 删除挂号信息
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersDeleteIdDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return RegistersApiFp(this.configuration).apiRegistersDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查询挂号信息
     * @param {RegistersInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersGetPost(body?: RegistersInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return RegistersApiFp(this.configuration).apiRegistersGetPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 修改挂号信息
     * @param {number} id
     * @param {RegistersDto} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersIdEditPut(id: number, body?: RegistersDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return RegistersApiFp(this.configuration).apiRegistersIdEditPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 开始诊疗
     * @param {number} id 挂号id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersIdStartTrantPut(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return RegistersApiFp(this.configuration).apiRegistersIdStartTrantPut(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 分页查询挂号信息
     * @param {PageRegisters} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistersApi
     */
    public async apiRegistersPagePost(body?: PageRegisters, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultObject>> {
        return RegistersApiFp(this.configuration).apiRegistersPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}

